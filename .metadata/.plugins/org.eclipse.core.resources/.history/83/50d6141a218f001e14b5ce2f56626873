/*
 * sched.c
 *
 *  Created on: Nov 29, 2023
 *      Author: DELL
 */

#include "sched.h"

#define TIME_CYCLE 10	// 10 miliseconds

typedef struct
{
	void (*pTask)();
	uint32_t Delay;
	uint32_t Period;
	uint8_t RunMe;
	uint32_t TaskID;
} sTask;

// array of tasks
#define SCH_MAX_TASK 5
sTask SCH_Tasks_G[SCH_MAX_TASK];
uint8_t have_task[SCH_MAX_TASK] = {0};

// Initial the scheduler
void SCH_Init()
{
	for (int i = 0; i < SCH_MAX_TASK; i++)
		have_task[i] = 0;
}

// Increase 1 time unit
void SCH_Update()
{
	for (int i = 0; i < SCH_MAX_TASK; i++)
	{
		if (have_task[i])
		{
			if (SCH_Tasks_G[i].Delay == 0)
			{
				SCH_Tasks_G[i].RunMe++;

				if (SCH_Tasks_G[i].Period)
				{
					SCH_Tasks_G[i].Delay = SCH_Tasks_G[i].Period;
				}
			}
			else
			{
				SCH_Tasks_G[i].Delay--;
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
			}
		}
	}
}

// Add new task into array of task
void SCH_Add_Task(void (*pFunction)(), uint32_t Delay, uint32_t Period)
{
	uint32_t current_index;
	uint8_t finded = 0;
	for (current_index = 0;current_index < SCH_MAX_TASK; current_index++)
	{
		if (!have_task[current_index])
		{
			have_task[current_index] = 1;
			finded = 1;
			break;
		}
	}
	if (!finded)
	{
		return;
	}
	SCH_Tasks_G[current_index].pTask = pFunction;
	SCH_Tasks_G[current_index].Delay = Delay;
	SCH_Tasks_G[current_index].Period = Period;
	SCH_Tasks_G[current_index].RunMe = 0;
	SCH_Tasks_G[current_index].TaskID = current_index;
	have_task[current_index] = 1;
}

// Delete task from array of task
void SCH_Delete(uint32_t taskID)
{
	have_task[taskID] = 0;
}

// Run the task in the array of task
void SCH_Dispatch_Tasks()
{
	for (int i = 0; i < SCH_MAX_TASK; i++)
	{
		if(have_task[i])
		{
			if (SCH_Tasks_G[i].RunMe)
			{
				(*SCH_Tasks_G[i].pTask)();
				SCH_Tasks_G[i].RunMe--;
				if (!SCH_Tasks_G[i].Period)
				{
					SCH_Delete(SCH_Tasks_G[i].TaskID);
				}
			}
		}
	}
}
