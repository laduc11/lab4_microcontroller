
lab4_SCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f4  080040f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080040f4  080040f4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040f4  080040f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080040fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000078  08004174  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08004174  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb9c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b2  00000000  00000000  0002fc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000320f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00032ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001883f  00000000  00000000  00033c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104bf  00000000  00000000  0004c447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbed  00000000  00000000  0005c906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea4f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  000ea548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004074 	.word	0x08004074

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004074 	.word	0x08004074

0800014c <checkState>:
uint8_t bFlag = 0;
uint8_t bLongFlag = 0;
GPIO_PinState bState[4] = {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET};

uint8_t checkState()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (bState[1] == GPIO_PIN_RESET && bState[2] == GPIO_PIN_RESET && bState[3] == GPIO_PIN_RESET)
 8000150:	4b09      	ldr	r3, [pc, #36]	; (8000178 <checkState+0x2c>)
 8000152:	785b      	ldrb	r3, [r3, #1]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d109      	bne.n	800016c <checkState+0x20>
 8000158:	4b07      	ldr	r3, [pc, #28]	; (8000178 <checkState+0x2c>)
 800015a:	789b      	ldrb	r3, [r3, #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d105      	bne.n	800016c <checkState+0x20>
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <checkState+0x2c>)
 8000162:	78db      	ldrb	r3, [r3, #3]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d101      	bne.n	800016c <checkState+0x20>
		return RESET;
 8000168:	2300      	movs	r3, #0
 800016a:	e000      	b.n	800016e <checkState+0x22>
	return SET;
 800016c:	2301      	movs	r3, #1
}
 800016e:	4618      	mov	r0, r3
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000004 	.word	0x20000004

0800017c <getKey>:
	}
	return 0;
}

void getKey()
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	bState[1] = bState[2];
 8000180:	4b1c      	ldr	r3, [pc, #112]	; (80001f4 <getKey+0x78>)
 8000182:	789a      	ldrb	r2, [r3, #2]
 8000184:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <getKey+0x78>)
 8000186:	705a      	strb	r2, [r3, #1]
	bState[2] = bState[3];
 8000188:	4b1a      	ldr	r3, [pc, #104]	; (80001f4 <getKey+0x78>)
 800018a:	78da      	ldrb	r2, [r3, #3]
 800018c:	4b19      	ldr	r3, [pc, #100]	; (80001f4 <getKey+0x78>)
 800018e:	709a      	strb	r2, [r3, #2]
	bState[3] = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000194:	4818      	ldr	r0, [pc, #96]	; (80001f8 <getKey+0x7c>)
 8000196:	f001 fb95 	bl	80018c4 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	461a      	mov	r2, r3
 800019e:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <getKey+0x78>)
 80001a0:	70da      	strb	r2, [r3, #3]
	if (checkState() == RESET)
 80001a2:	f7ff ffd3 	bl	800014c <checkState>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d11c      	bne.n	80001e6 <getKey+0x6a>
	{
		if (bState[0] == GPIO_PIN_SET)
 80001ac:	4b11      	ldr	r3, [pc, #68]	; (80001f4 <getKey+0x78>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d10a      	bne.n	80001ca <getKey+0x4e>
		{
			bFlag = 1;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <getKey+0x80>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	701a      	strb	r2, [r3, #0]
			bState[0] = GPIO_PIN_RESET;
 80001ba:	4b0e      	ldr	r3, [pc, #56]	; (80001f4 <getKey+0x78>)
 80001bc:	2200      	movs	r2, #0
 80001be:	701a      	strb	r2, [r3, #0]
			counter = PRESS_TIME;
 80001c0:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <getKey+0x84>)
 80001c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80001c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		counter = PRESS_TIME;
	}
}
 80001c8:	e011      	b.n	80001ee <getKey+0x72>
			if (counter == 0)
 80001ca:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <getKey+0x84>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d103      	bne.n	80001da <getKey+0x5e>
				bLongFlag = 1;
 80001d2:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <getKey+0x88>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
}
 80001d8:	e009      	b.n	80001ee <getKey+0x72>
				counter--;
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <getKey+0x84>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	3b01      	subs	r3, #1
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <getKey+0x84>)
 80001e2:	6013      	str	r3, [r2, #0]
}
 80001e4:	e003      	b.n	80001ee <getKey+0x72>
		counter = PRESS_TIME;
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <getKey+0x84>)
 80001e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80001ec:	601a      	str	r2, [r3, #0]
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000004 	.word	0x20000004
 80001f8:	40011000 	.word	0x40011000
 80001fc:	20000094 	.word	0x20000094
 8000200:	20000000 	.word	0x20000000
 8000204:	20000095 	.word	0x20000095

08000208 <display7seg>:
 * Display number on 7-segment led
 * input: number range 0-9
 * output: none
 * */
void display7seg(uint8_t num)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b09      	cmp	r3, #9
 8000216:	f200 8093 	bhi.w	8000340 <display7seg+0x138>
 800021a:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <display7seg+0x18>)
 800021c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000220:	08000249 	.word	0x08000249
 8000224:	08000263 	.word	0x08000263
 8000228:	0800027d 	.word	0x0800027d
 800022c:	08000297 	.word	0x08000297
 8000230:	080002b1 	.word	0x080002b1
 8000234:	080002cb 	.word	0x080002cb
 8000238:	080002e5 	.word	0x080002e5
 800023c:	080002ff 	.word	0x080002ff
 8000240:	08000319 	.word	0x08000319
 8000244:	08000327 	.word	0x08000327
	{
	case 0:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin, RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800024e:	4842      	ldr	r0, [pc, #264]	; (8000358 <display7seg+0x150>)
 8000250:	f001 fb4f 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG6_Pin, SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025a:	483f      	ldr	r0, [pc, #252]	; (8000358 <display7seg+0x150>)
 800025c:	f001 fb49 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 8000260:	e075      	b.n	800034e <display7seg+0x146>
	case 1:
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG2_Pin, RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000268:	483b      	ldr	r0, [pc, #236]	; (8000358 <display7seg+0x150>)
 800026a:	f001 fb42 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 41f2 	mov.w	r1, #30976	; 0x7900
 8000274:	4838      	ldr	r0, [pc, #224]	; (8000358 <display7seg+0x150>)
 8000276:	f001 fb3c 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 800027a:	e068      	b.n	800034e <display7seg+0x146>
	case 2:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin|SEG6_Pin, RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8000282:	4835      	ldr	r0, [pc, #212]	; (8000358 <display7seg+0x150>)
 8000284:	f001 fb35 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG2_Pin|SEG5_Pin, SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 800028e:	4832      	ldr	r0, [pc, #200]	; (8000358 <display7seg+0x150>)
 8000290:	f001 fb2f 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 8000294:	e05b      	b.n	800034e <display7seg+0x146>
	case 3:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG6_Pin, RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 419e 	mov.w	r1, #20224	; 0x4f00
 800029c:	482e      	ldr	r0, [pc, #184]	; (8000358 <display7seg+0x150>)
 800029e:	f001 fb28 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_Pin|SEG5_Pin, SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80002a8:	482b      	ldr	r0, [pc, #172]	; (8000358 <display7seg+0x150>)
 80002aa:	f001 fb22 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 80002ae:	e04e      	b.n	800034e <display7seg+0x146>
	case 4:
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG2_Pin|SEG5_Pin|SEG6_Pin, RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
 80002b6:	4828      	ldr	r0, [pc, #160]	; (8000358 <display7seg+0x150>)
 80002b8:	f001 fb1b 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG3_Pin|SEG4_Pin, SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80002c2:	4825      	ldr	r0, [pc, #148]	; (8000358 <display7seg+0x150>)
 80002c4:	f001 fb15 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 80002c8:	e041      	b.n	800034e <display7seg+0x146>
	case 5:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 41da 	mov.w	r1, #27904	; 0x6d00
 80002d0:	4821      	ldr	r0, [pc, #132]	; (8000358 <display7seg+0x150>)
 80002d2:	f001 fb0e 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG4_Pin, SET);
 80002d6:	2201      	movs	r2, #1
 80002d8:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80002dc:	481e      	ldr	r0, [pc, #120]	; (8000358 <display7seg+0x150>)
 80002de:	f001 fb08 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 80002e2:	e034      	b.n	800034e <display7seg+0x146>
	case 6:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80002ea:	481b      	ldr	r0, [pc, #108]	; (8000358 <display7seg+0x150>)
 80002ec:	f001 fb01 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	4818      	ldr	r0, [pc, #96]	; (8000358 <display7seg+0x150>)
 80002f8:	f001 fafb 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 80002fc:	e027      	b.n	800034e <display7seg+0x146>
	case 7:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin, RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000304:	4814      	ldr	r0, [pc, #80]	; (8000358 <display7seg+0x150>)
 8000306:	f001 faf4 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 800030a:	2201      	movs	r2, #1
 800030c:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8000310:	4811      	ldr	r0, [pc, #68]	; (8000358 <display7seg+0x150>)
 8000312:	f001 faee 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 8000316:	e01a      	b.n	800034e <display7seg+0x146>
	case 8:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 800031e:	480e      	ldr	r0, [pc, #56]	; (8000358 <display7seg+0x150>)
 8000320:	f001 fae7 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 8000324:	e013      	b.n	800034e <display7seg+0x146>
	case 9:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 800032c:	480a      	ldr	r0, [pc, #40]	; (8000358 <display7seg+0x150>)
 800032e:	f001 fae0 	bl	80018f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8000332:	2201      	movs	r2, #1
 8000334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <display7seg+0x150>)
 800033a:	f001 fada 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 800033e:	e006      	b.n	800034e <display7seg+0x146>
	default:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000346:	4804      	ldr	r0, [pc, #16]	; (8000358 <display7seg+0x150>)
 8000348:	f001 fad3 	bl	80018f2 <HAL_GPIO_WritePin>
		break;
 800034c:	bf00      	nop
	}
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800

0800035c <update7seg>:
 * Update 7-segment led
 * input: none
 * output: none
 * */
void update7seg()
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	buffer[0][0] = (buffer[0][0] + 1) % 10;
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <update7seg+0x30>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	1c5a      	adds	r2, r3, #1
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <update7seg+0x34>)
 8000368:	fb83 1302 	smull	r1, r3, r3, r2
 800036c:	1099      	asrs	r1, r3, #2
 800036e:	17d3      	asrs	r3, r2, #31
 8000370:	1ac9      	subs	r1, r1, r3
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	1ad1      	subs	r1, r2, r3
 800037c:	b2ca      	uxtb	r2, r1
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <update7seg+0x30>)
 8000380:	701a      	strb	r2, [r3, #0]
}
 8000382:	bf00      	nop
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	20000098 	.word	0x20000098
 8000390:	66666667 	.word	0x66666667

08000394 <display1LED>:

void display1LED()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	display7seg(buffer[0][0]);
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <display1LED+0x14>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff33 	bl	8000208 <display7seg>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000098 	.word	0x20000098

080003ac <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a08      	ldr	r2, [pc, #32]	; (80003dc <HAL_UART_RxCpltCallback+0x30>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d10a      	bne.n	80003d4 <HAL_UART_RxCpltCallback+0x28>
	  HAL_UART_Transmit(&huart2, &temp, 1, 50);
 80003be:	2332      	movs	r3, #50	; 0x32
 80003c0:	2201      	movs	r2, #1
 80003c2:	4907      	ldr	r1, [pc, #28]	; (80003e0 <HAL_UART_RxCpltCallback+0x34>)
 80003c4:	4807      	ldr	r0, [pc, #28]	; (80003e4 <HAL_UART_RxCpltCallback+0x38>)
 80003c6:	f002 fbc1 	bl	8002b4c <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80003ca:	2201      	movs	r2, #1
 80003cc:	4904      	ldr	r1, [pc, #16]	; (80003e0 <HAL_UART_RxCpltCallback+0x34>)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <HAL_UART_RxCpltCallback+0x38>)
 80003d0:	f002 fc3f 	bl	8002c52 <HAL_UART_Receive_IT>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40004400 	.word	0x40004400
 80003e0:	2000009c 	.word	0x2000009c
 80003e4:	20000130 	.word	0x20000130

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ec:	f000 fcbc 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f0:	f000 f836 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f4:	f000 f938 	bl	8000668 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003f8:	f000 f8c0 	bl	800057c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80003fc:	f000 f90a 	bl	8000614 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000400:	f000 f87e 	bl	8000500 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000404:	4811      	ldr	r0, [pc, #68]	; (800044c <main+0x64>)
 8000406:	f001 ffb9 	bl	800237c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 800040a:	f000 f9bf 	bl	800078c <SCH_Init>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2120      	movs	r1, #32
 8000412:	480f      	ldr	r0, [pc, #60]	; (8000450 <main+0x68>)
 8000414:	f001 fa6d 	bl	80018f2 <HAL_GPIO_WritePin>
//  SCH_Add_Task(print_time, 200, 10);
  SCH_Add_Task(Toggle_RED, 1000, 500);
 8000418:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800041c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <main+0x6c>)
 8000422:	f000 fa47 	bl	80008b4 <SCH_Add_Task>
  SCH_Add_Task(update7seg, 1000, 1000);
 8000426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800042a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800042e:	480a      	ldr	r0, [pc, #40]	; (8000458 <main+0x70>)
 8000430:	f000 fa40 	bl	80008b4 <SCH_Add_Task>
  SCH_Add_Task(Toggle_GREEN, 1000, 1500);
 8000434:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000438:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800043c:	4807      	ldr	r0, [pc, #28]	; (800045c <main+0x74>)
 800043e:	f000 fa39 	bl	80008b4 <SCH_Add_Task>

  while (1)
  {
	  display1LED();
 8000442:	f7ff ffa7 	bl	8000394 <display1LED>
	  SCH_Dispatch_Tasks();
 8000446:	f000 faa7 	bl	8000998 <SCH_Dispatch_Tasks>
	  display1LED();
 800044a:	e7fa      	b.n	8000442 <main+0x5a>
 800044c:	200000e8 	.word	0x200000e8
 8000450:	40010800 	.word	0x40010800
 8000454:	08000705 	.word	0x08000705
 8000458:	0800035d 	.word	0x0800035d
 800045c:	08000719 	.word	0x08000719

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b094      	sub	sp, #80	; 0x50
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046a:	2228      	movs	r2, #40	; 0x28
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f003 f9be 	bl	80037f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	2302      	movs	r3, #2
 8000492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000498:	2310      	movs	r3, #16
 800049a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800049c:	2300      	movs	r3, #0
 800049e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 fa55 	bl	8001954 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004b0:	f000 f966 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fcc0 	bl	8001e54 <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004da:	f000 f951 	bl	8000780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004de:	2302      	movs	r3, #2
 80004e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 fe41 	bl	8002170 <HAL_RCCEx_PeriphCLKConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004f4:	f000 f944 	bl	8000780 <Error_Handler>
  }
}
 80004f8:	bf00      	nop
 80004fa:	3750      	adds	r7, #80	; 0x50
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_ADC1_Init+0x74>)
 8000512:	4a19      	ldr	r2, [pc, #100]	; (8000578 <MX_ADC1_Init+0x78>)
 8000514:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_ADC1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_ADC1_Init+0x74>)
 800051e:	2201      	movs	r2, #1
 8000520:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_ADC1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_ADC1_Init+0x74>)
 800052a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800052e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_ADC1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_ADC1_Init+0x74>)
 8000538:	2201      	movs	r2, #1
 800053a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_ADC1_Init+0x74>)
 800053e:	f000 fc75 	bl	8000e2c <HAL_ADC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000548:	f000 f91a 	bl	8000780 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000550:	2301      	movs	r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_ADC1_Init+0x74>)
 800055e:	f000 fd3d 	bl	8000fdc <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000568:	f000 f90a 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000b8 	.word	0x200000b8
 8000578:	40012400 	.word	0x40012400

0800057c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <MX_TIM2_Init+0x94>)
 800059a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800059e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_TIM2_Init+0x94>)
 80005a2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_TIM2_Init+0x94>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_TIM2_Init+0x94>)
 80005b0:	2209      	movs	r2, #9
 80005b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_TIM2_Init+0x94>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_TIM2_Init+0x94>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c0:	4813      	ldr	r0, [pc, #76]	; (8000610 <MX_TIM2_Init+0x94>)
 80005c2:	f001 fe8b 	bl	80022dc <HAL_TIM_Base_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005cc:	f000 f8d8 	bl	8000780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	4619      	mov	r1, r3
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <MX_TIM2_Init+0x94>)
 80005de:	f002 f821 	bl	8002624 <HAL_TIM_ConfigClockSource>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005e8:	f000 f8ca 	bl	8000780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_TIM2_Init+0x94>)
 80005fa:	f002 f9ed 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000604:	f000 f8bc 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000e8 	.word	0x200000e8

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800064c:	f002 fa2e 	bl	8002aac <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 f893 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000130 	.word	0x20000130
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_GPIO_Init+0x90>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <MX_GPIO_Init+0x90>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_GPIO_Init+0x90>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0310 	and.w	r3, r3, #16
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_GPIO_Init+0x90>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_GPIO_Init+0x90>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_GPIO_Init+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|SEG0_Pin|SEG1_Pin
 80006ac:	2200      	movs	r2, #0
 80006ae:	f647 7160 	movw	r1, #32608	; 0x7f60
 80006b2:	4812      	ldr	r0, [pc, #72]	; (80006fc <MX_GPIO_Init+0x94>)
 80006b4:	f001 f91d 	bl	80018f2 <HAL_GPIO_WritePin>
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <MX_GPIO_Init+0x98>)
 80006ce:	f000 ff7f 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|SEG0_Pin|SEG1_Pin
 80006d2:	f647 7360 	movw	r3, #32608	; 0x7f60
 80006d6:	60bb      	str	r3, [r7, #8]
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_GPIO_Init+0x94>)
 80006ec:	f000 ff70 	bl	80015d0 <HAL_GPIO_Init>

}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010800 	.word	0x40010800
 8000700:	40011000 	.word	0x40011000

08000704 <Toggle_RED>:

/* USER CODE BEGIN 4 */
void Toggle_RED()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000708:	2120      	movs	r1, #32
 800070a:	4802      	ldr	r0, [pc, #8]	; (8000714 <Toggle_RED+0x10>)
 800070c:	f001 f909 	bl	8001922 <HAL_GPIO_TogglePin>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40010800 	.word	0x40010800

08000718 <Toggle_GREEN>:

void Toggle_GREEN()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	4802      	ldr	r0, [pc, #8]	; (8000728 <Toggle_GREEN+0x10>)
 8000720:	f001 f8ff 	bl	8001922 <HAL_GPIO_TogglePin>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40010800 	.word	0x40010800

0800072c <print_time>:

void print_time()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
	char str[12];
	HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "%ld\r", get_time()), 500);
 8000732:	f000 f98d 	bl	8000a50 <get_time>
 8000736:	4602      	mov	r2, r0
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <print_time+0x30>)
 800073c:	4618      	mov	r0, r3
 800073e:	f003 f85f 	bl	8003800 <siprintf>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	1d39      	adds	r1, r7, #4
 8000748:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <print_time+0x34>)
 800074e:	f002 f9fd 	bl	8002b4c <HAL_UART_Transmit>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	0800408c 	.word	0x0800408c
 8000760:	20000130 	.word	0x20000130

08000764 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	print_time();
 800076c:	f7ff ffde 	bl	800072c <print_time>
	getKey();
 8000770:	f7ff fd04 	bl	800017c <getKey>
	SCH_Update();
 8000774:	f000 f828 	bl	80007c8 <SCH_Update>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <SCH_Init>:
sTask SCH_Tasks_G[SCH_MAX_TASK];
uint8_t have_task[SCH_MAX_TASK] = {0};

// Initial the scheduler
void SCH_Init()
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
	timestamps = 0;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <SCH_Init+0x34>)
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < SCH_MAX_TASK; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	e007      	b.n	80007ae <SCH_Init+0x22>
		have_task[i] = 0;
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <SCH_Init+0x38>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SCH_MAX_TASK; i++)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3301      	adds	r3, #1
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b09      	cmp	r3, #9
 80007b2:	ddf4      	ble.n	800079e <SCH_Init+0x12>
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000178 	.word	0x20000178
 80007c4:	200000a0 	.word	0x200000a0

080007c8 <SCH_Update>:

// Increase 1 time unit
void SCH_Update()
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
	timestamps++;
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <SCH_Update+0xe0>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <SCH_Update+0xe0>)
 80007d6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < SCH_MAX_TASK; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	e05a      	b.n	8000894 <SCH_Update+0xcc>
	{
		if (have_task[i])
 80007de:	4a33      	ldr	r2, [pc, #204]	; (80008ac <SCH_Update+0xe4>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d051      	beq.n	800088e <SCH_Update+0xc6>
		{
			if (SCH_Tasks_G[i].Delay == 0)
 80007ea:	4931      	ldr	r1, [pc, #196]	; (80008b0 <SCH_Update+0xe8>)
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	3304      	adds	r3, #4
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d132      	bne.n	8000866 <SCH_Update+0x9e>
			{
				SCH_Tasks_G[i].RunMe++;
 8000800:	492b      	ldr	r1, [pc, #172]	; (80008b0 <SCH_Update+0xe8>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	440b      	add	r3, r1
 800080e:	330c      	adds	r3, #12
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	b2d8      	uxtb	r0, r3
 8000816:	4926      	ldr	r1, [pc, #152]	; (80008b0 <SCH_Update+0xe8>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	440b      	add	r3, r1
 8000824:	330c      	adds	r3, #12
 8000826:	4602      	mov	r2, r0
 8000828:	701a      	strb	r2, [r3, #0]

				if (SCH_Tasks_G[i].Period)
 800082a:	4921      	ldr	r1, [pc, #132]	; (80008b0 <SCH_Update+0xe8>)
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	440b      	add	r3, r1
 8000838:	3308      	adds	r3, #8
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d026      	beq.n	800088e <SCH_Update+0xc6>
				{
					SCH_Tasks_G[i].Delay = SCH_Tasks_G[i].Period;
 8000840:	491b      	ldr	r1, [pc, #108]	; (80008b0 <SCH_Update+0xe8>)
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	3308      	adds	r3, #8
 8000850:	6819      	ldr	r1, [r3, #0]
 8000852:	4817      	ldr	r0, [pc, #92]	; (80008b0 <SCH_Update+0xe8>)
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4403      	add	r3, r0
 8000860:	3304      	adds	r3, #4
 8000862:	6019      	str	r1, [r3, #0]
 8000864:	e013      	b.n	800088e <SCH_Update+0xc6>
				}
			}
			else
			{
				SCH_Tasks_G[i].Delay -= TIME_CYCLE;
 8000866:	4912      	ldr	r1, [pc, #72]	; (80008b0 <SCH_Update+0xe8>)
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4613      	mov	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	440b      	add	r3, r1
 8000874:	3304      	adds	r3, #4
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f1a3 010a 	sub.w	r1, r3, #10
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <SCH_Update+0xe8>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4403      	add	r3, r0
 800088a:	3304      	adds	r3, #4
 800088c:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < SCH_MAX_TASK; i++)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3301      	adds	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b09      	cmp	r3, #9
 8000898:	dda1      	ble.n	80007de <SCH_Update+0x16>
			}
		}
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000178 	.word	0x20000178
 80008ac:	200000a0 	.word	0x200000a0
 80008b0:	2000017c 	.word	0x2000017c

080008b4 <SCH_Add_Task>:

// Add new task into array of task
void SCH_Add_Task(void (*pFunction)(), uint32_t Delay, uint32_t Period)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
	uint32_t current_index;
	uint8_t finded = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	74fb      	strb	r3, [r7, #19]
	for (current_index = 0; current_index < SCH_MAX_TASK; current_index++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e010      	b.n	80008ec <SCH_Add_Task+0x38>
	{
		if (!have_task[current_index])
 80008ca:	4a29      	ldr	r2, [pc, #164]	; (8000970 <SCH_Add_Task+0xbc>)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d107      	bne.n	80008e6 <SCH_Add_Task+0x32>
		{
			have_task[current_index] = 1;
 80008d6:	4a26      	ldr	r2, [pc, #152]	; (8000970 <SCH_Add_Task+0xbc>)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
			finded = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	74fb      	strb	r3, [r7, #19]
			break;
 80008e4:	e005      	b.n	80008f2 <SCH_Add_Task+0x3e>
	for (current_index = 0; current_index < SCH_MAX_TASK; current_index++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	2b09      	cmp	r3, #9
 80008f0:	d9eb      	bls.n	80008ca <SCH_Add_Task+0x16>
		}
	}
	if (!finded)
 80008f2:	7cfb      	ldrb	r3, [r7, #19]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d036      	beq.n	8000966 <SCH_Add_Task+0xb2>
	{
		return;
	}
	SCH_Tasks_G[current_index].pTask = pFunction;
 80008f8:	491e      	ldr	r1, [pc, #120]	; (8000974 <SCH_Add_Task+0xc0>)
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[current_index].Delay = Delay;
 800090a:	491a      	ldr	r1, [pc, #104]	; (8000974 <SCH_Add_Task+0xc0>)
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	440b      	add	r3, r1
 8000918:	3304      	adds	r3, #4
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[current_index].Period = Period;
 800091e:	4915      	ldr	r1, [pc, #84]	; (8000974 <SCH_Add_Task+0xc0>)
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	4613      	mov	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	440b      	add	r3, r1
 800092c:	3308      	adds	r3, #8
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[current_index].RunMe = 0;
 8000932:	4910      	ldr	r1, [pc, #64]	; (8000974 <SCH_Add_Task+0xc0>)
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	330c      	adds	r3, #12
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
	SCH_Tasks_G[current_index].TaskID = current_index;
 8000946:	490b      	ldr	r1, [pc, #44]	; (8000974 <SCH_Add_Task+0xc0>)
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	3310      	adds	r3, #16
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]
	have_task[current_index] = 1;
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SCH_Add_Task+0xbc>)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	4413      	add	r3, r2
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e000      	b.n	8000968 <SCH_Add_Task+0xb4>
		return;
 8000966:	bf00      	nop
}
 8000968:	371c      	adds	r7, #28
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	200000a0 	.word	0x200000a0
 8000974:	2000017c 	.word	0x2000017c

08000978 <SCH_Delete>:

// Delete task from array of task
void SCH_Delete(uint32_t taskID)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	have_task[taskID] = 0;
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <SCH_Delete+0x1c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	200000a0 	.word	0x200000a0

08000998 <SCH_Dispatch_Tasks>:

// Run the task in the array of task
void SCH_Dispatch_Tasks()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SCH_MAX_TASK; i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	e048      	b.n	8000a36 <SCH_Dispatch_Tasks+0x9e>
	{
		if(have_task[i])
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <SCH_Dispatch_Tasks+0xb0>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d03f      	beq.n	8000a30 <SCH_Dispatch_Tasks+0x98>
		{
			if (SCH_Tasks_G[i].RunMe)
 80009b0:	4926      	ldr	r1, [pc, #152]	; (8000a4c <SCH_Dispatch_Tasks+0xb4>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	330c      	adds	r3, #12
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d034      	beq.n	8000a30 <SCH_Dispatch_Tasks+0x98>
			{
				(*SCH_Tasks_G[i].pTask)();
 80009c6:	4921      	ldr	r1, [pc, #132]	; (8000a4c <SCH_Dispatch_Tasks+0xb4>)
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4798      	blx	r3
				SCH_Tasks_G[i].RunMe--;
 80009d8:	491c      	ldr	r1, [pc, #112]	; (8000a4c <SCH_Dispatch_Tasks+0xb4>)
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4613      	mov	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	330c      	adds	r3, #12
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b2d8      	uxtb	r0, r3
 80009ee:	4917      	ldr	r1, [pc, #92]	; (8000a4c <SCH_Dispatch_Tasks+0xb4>)
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	330c      	adds	r3, #12
 80009fe:	4602      	mov	r2, r0
 8000a00:	701a      	strb	r2, [r3, #0]
				if (!SCH_Tasks_G[i].Period)
 8000a02:	4912      	ldr	r1, [pc, #72]	; (8000a4c <SCH_Dispatch_Tasks+0xb4>)
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10b      	bne.n	8000a30 <SCH_Dispatch_Tasks+0x98>
				{
					SCH_Delete(SCH_Tasks_G[i].TaskID);
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <SCH_Dispatch_Tasks+0xb4>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	440b      	add	r3, r1
 8000a26:	3310      	adds	r3, #16
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ffa4 	bl	8000978 <SCH_Delete>
	for (int i = 0; i < SCH_MAX_TASK; i++)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b09      	cmp	r3, #9
 8000a3a:	ddb3      	ble.n	80009a4 <SCH_Dispatch_Tasks+0xc>
				}
			}
		}
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000a0 	.word	0x200000a0
 8000a4c:	2000017c 	.word	0x2000017c

08000a50 <get_time>:

// Get timestamps
uint32_t get_time()
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	return timestamps;
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <get_time+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000178 	.word	0x20000178

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_MspInit+0x60>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_MspInit+0x60>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <HAL_ADC_MspInit+0x6c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d121      	bne.n	8000b2c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_ADC_MspInit+0x74>)
 8000b28:	f000 fd52 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40012400 	.word	0x40012400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010800 	.word	0x40010800

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b50:	d113      	bne.n	8000b7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_TIM_Base_MspInit+0x44>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_TIM_Base_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_TIM_Base_MspInit+0x44>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	201c      	movs	r0, #28
 8000b70:	f000 fc45 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b74:	201c      	movs	r0, #28
 8000b76:	f000 fc5e 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <HAL_UART_MspInit+0x98>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d137      	bne.n	8000c18 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <HAL_UART_MspInit+0x9c>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <HAL_UART_MspInit+0x9c>)
 8000bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb2:	61d3      	str	r3, [r2, #28]
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <HAL_UART_MspInit+0x9c>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_UART_MspInit+0x9c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0x9c>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_UART_MspInit+0x9c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <HAL_UART_MspInit+0xa0>)
 8000bec:	f000 fcf0 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	4809      	ldr	r0, [pc, #36]	; (8000c28 <HAL_UART_MspInit+0xa0>)
 8000c04:	f000 fce4 	bl	80015d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2026      	movs	r0, #38	; 0x26
 8000c0e:	f000 fbf6 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c12:	2026      	movs	r0, #38	; 0x26
 8000c14:	f000 fc0f 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40004400 	.word	0x40004400
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c72:	f000 f8bf 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM2_IRQHandler+0x10>)
 8000c82:	f001 fbc7 	bl	8002414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000e8 	.word	0x200000e8

08000c90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <USART2_IRQHandler+0x10>)
 8000c96:	f002 f801 	bl	8002c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000130 	.word	0x20000130

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d207      	bcs.n	8000ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd4:	f002 fd62 	bl	800379c <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20002800 	.word	0x20002800
 8000d04:	00000400 	.word	0x00000400
 8000d08:	200000ac 	.word	0x200000ac
 8000d0c:	20000258 	.word	0x20000258

08000d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d1c:	f7ff fff8 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d22:	490c      	ldr	r1, [pc, #48]	; (8000d54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d38:	4c09      	ldr	r4, [pc, #36]	; (8000d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f002 fd2f 	bl	80037a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4a:	f7ff fb4d 	bl	80003e8 <main>
  bx lr
 8000d4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d58:	080040fc 	.word	0x080040fc
  ldr r2, =_sbss
 8000d5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d60:	20000258 	.word	0x20000258

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x28>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x28>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 fb35 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe6e 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fb4d 	bl	8001452 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 fb15 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000010 	.word	0x20000010
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x1c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_IncTick+0x20>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <HAL_IncTick+0x20>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000010 	.word	0x20000010
 8000e14:	20000244 	.word	0x20000244

08000e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <HAL_GetTick+0x10>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	20000244 	.word	0x20000244

08000e2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0be      	b.n	8000fcc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d109      	bne.n	8000e70 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fe2c 	bl	8000ac8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 f9ab 	bl	80011cc <ADC_ConversionStop_Disable>
 8000e76:	4603      	mov	r3, r0
 8000e78:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8099 	bne.w	8000fba <HAL_ADC_Init+0x18e>
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f040 8095 	bne.w	8000fba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e98:	f023 0302 	bic.w	r3, r3, #2
 8000e9c:	f043 0202 	orr.w	r2, r3, #2
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7b1b      	ldrb	r3, [r3, #12]
 8000eb2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000eb4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec4:	d003      	beq.n	8000ece <HAL_ADC_Init+0xa2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d102      	bne.n	8000ed4 <HAL_ADC_Init+0xa8>
 8000ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed2:	e000      	b.n	8000ed6 <HAL_ADC_Init+0xaa>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7d1b      	ldrb	r3, [r3, #20]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d119      	bne.n	8000f18 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7b1b      	ldrb	r3, [r3, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d109      	bne.n	8000f00 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	035a      	lsls	r2, r3, #13
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	e00b      	b.n	8000f18 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f043 0220 	orr.w	r2, r3, #32
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <HAL_ADC_Init+0x1a8>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f48:	d003      	beq.n	8000f52 <HAL_ADC_Init+0x126>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d104      	bne.n	8000f5c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	051b      	lsls	r3, r3, #20
 8000f5a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_Init+0x1ac>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d10b      	bne.n	8000f98 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	f023 0303 	bic.w	r3, r3, #3
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f96:	e018      	b.n	8000fca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	f023 0312 	bic.w	r3, r3, #18
 8000fa0:	f043 0210 	orr.w	r2, r3, #16
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fb8:	e007      	b.n	8000fca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f043 0210 	orr.w	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	ffe1f7fd 	.word	0xffe1f7fd
 8000fd8:	ff1f0efe 	.word	0xff1f0efe

08000fdc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x20>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e0dc      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x1da>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b06      	cmp	r3, #6
 800100a:	d81c      	bhi.n	8001046 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	3b05      	subs	r3, #5
 800101e:	221f      	movs	r2, #31
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	4019      	ands	r1, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3b05      	subs	r3, #5
 8001038:	fa00 f203 	lsl.w	r2, r0, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
 8001044:	e03c      	b.n	80010c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b0c      	cmp	r3, #12
 800104c:	d81c      	bhi.n	8001088 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	3b23      	subs	r3, #35	; 0x23
 8001060:	221f      	movs	r2, #31
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	4019      	ands	r1, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b23      	subs	r3, #35	; 0x23
 800107a:	fa00 f203 	lsl.w	r2, r0, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
 8001086:	e01b      	b.n	80010c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b41      	subs	r3, #65	; 0x41
 800109a:	221f      	movs	r2, #31
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4019      	ands	r1, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	3b41      	subs	r3, #65	; 0x41
 80010b4:	fa00 f203 	lsl.w	r2, r0, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d91c      	bls.n	8001102 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	3b1e      	subs	r3, #30
 80010da:	2207      	movs	r2, #7
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4019      	ands	r1, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	6898      	ldr	r0, [r3, #8]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	3b1e      	subs	r3, #30
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	e019      	b.n	8001136 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6919      	ldr	r1, [r3, #16]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	2207      	movs	r2, #7
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	4019      	ands	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6898      	ldr	r0, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	fa00 f203 	lsl.w	r2, r0, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b10      	cmp	r3, #16
 800113c:	d003      	beq.n	8001146 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001142:	2b11      	cmp	r3, #17
 8001144:	d132      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d125      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d126      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800116c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b10      	cmp	r3, #16
 8001174:	d11a      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	0c9a      	lsrs	r2, r3, #18
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800118c:	e002      	b.n	8001194 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3b01      	subs	r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <HAL_ADC_ConfigChannel+0x1b2>
 800119a:	e007      	b.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	f043 0220 	orr.w	r2, r3, #32
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40012400 	.word	0x40012400
 80011c4:	20000008 	.word	0x20000008
 80011c8:	431bde83 	.word	0x431bde83

080011cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d12e      	bne.n	8001244 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011f6:	f7ff fe0f 	bl	8000e18 <HAL_GetTick>
 80011fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011fc:	e01b      	b.n	8001236 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011fe:	f7ff fe0b 	bl	8000e18 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d914      	bls.n	8001236 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10d      	bne.n	8001236 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	f043 0210 	orr.w	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e007      	b.n	8001246 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b01      	cmp	r3, #1
 8001242:	d0dc      	beq.n	80011fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4906      	ldr	r1, [pc, #24]	; (80012e8 <__NVIC_EnableIRQ+0x34>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff90 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff2d 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff42 	bl	8001298 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff90 	bl	8001340 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5f 	bl	80012ec <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff35 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa2 	bl	80013a4 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d008      	beq.n	8001494 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2204      	movs	r2, #4
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e020      	b.n	80014d6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 020e 	bic.w	r2, r2, #14
 80014a2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f202 	lsl.w	r2, r1, r2
 80014c2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d005      	beq.n	8001504 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2204      	movs	r2, #4
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e051      	b.n	80015a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020e 	bic.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_DMA_Abort_IT+0xd4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d029      	beq.n	8001582 <HAL_DMA_Abort_IT+0xa2>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <HAL_DMA_Abort_IT+0xd8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d022      	beq.n	800157e <HAL_DMA_Abort_IT+0x9e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_DMA_Abort_IT+0xdc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01a      	beq.n	8001578 <HAL_DMA_Abort_IT+0x98>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_DMA_Abort_IT+0xe0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d012      	beq.n	8001572 <HAL_DMA_Abort_IT+0x92>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <HAL_DMA_Abort_IT+0xe4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00a      	beq.n	800156c <HAL_DMA_Abort_IT+0x8c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <HAL_DMA_Abort_IT+0xe8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d102      	bne.n	8001566 <HAL_DMA_Abort_IT+0x86>
 8001560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001564:	e00e      	b.n	8001584 <HAL_DMA_Abort_IT+0xa4>
 8001566:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800156a:	e00b      	b.n	8001584 <HAL_DMA_Abort_IT+0xa4>
 800156c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001570:	e008      	b.n	8001584 <HAL_DMA_Abort_IT+0xa4>
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	e005      	b.n	8001584 <HAL_DMA_Abort_IT+0xa4>
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	e002      	b.n	8001584 <HAL_DMA_Abort_IT+0xa4>
 800157e:	2310      	movs	r3, #16
 8001580:	e000      	b.n	8001584 <HAL_DMA_Abort_IT+0xa4>
 8001582:	2301      	movs	r3, #1
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_DMA_Abort_IT+0xec>)
 8001586:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
    } 
  }
  return status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020008 	.word	0x40020008
 80015b8:	4002001c 	.word	0x4002001c
 80015bc:	40020030 	.word	0x40020030
 80015c0:	40020044 	.word	0x40020044
 80015c4:	40020058 	.word	0x40020058
 80015c8:	4002006c 	.word	0x4002006c
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e2:	e148      	b.n	8001876 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015e4:	2201      	movs	r2, #1
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f040 8137 	bne.w	8001870 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4aa3      	ldr	r2, [pc, #652]	; (8001894 <HAL_GPIO_Init+0x2c4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d05e      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 800160c:	4aa1      	ldr	r2, [pc, #644]	; (8001894 <HAL_GPIO_Init+0x2c4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d875      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001612:	4aa1      	ldr	r2, [pc, #644]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d058      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001618:	4a9f      	ldr	r2, [pc, #636]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d86f      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800161e:	4a9f      	ldr	r2, [pc, #636]	; (800189c <HAL_GPIO_Init+0x2cc>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d052      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001624:	4a9d      	ldr	r2, [pc, #628]	; (800189c <HAL_GPIO_Init+0x2cc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d869      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800162a:	4a9d      	ldr	r2, [pc, #628]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04c      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001630:	4a9b      	ldr	r2, [pc, #620]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d863      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001636:	4a9b      	ldr	r2, [pc, #620]	; (80018a4 <HAL_GPIO_Init+0x2d4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d046      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 800163c:	4a99      	ldr	r2, [pc, #612]	; (80018a4 <HAL_GPIO_Init+0x2d4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d85d      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d82a      	bhi.n	800169c <HAL_GPIO_Init+0xcc>
 8001646:	2b12      	cmp	r3, #18
 8001648:	d859      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800164a:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <HAL_GPIO_Init+0x80>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	080016cb 	.word	0x080016cb
 8001654:	080016a5 	.word	0x080016a5
 8001658:	080016b7 	.word	0x080016b7
 800165c:	080016f9 	.word	0x080016f9
 8001660:	080016ff 	.word	0x080016ff
 8001664:	080016ff 	.word	0x080016ff
 8001668:	080016ff 	.word	0x080016ff
 800166c:	080016ff 	.word	0x080016ff
 8001670:	080016ff 	.word	0x080016ff
 8001674:	080016ff 	.word	0x080016ff
 8001678:	080016ff 	.word	0x080016ff
 800167c:	080016ff 	.word	0x080016ff
 8001680:	080016ff 	.word	0x080016ff
 8001684:	080016ff 	.word	0x080016ff
 8001688:	080016ff 	.word	0x080016ff
 800168c:	080016ff 	.word	0x080016ff
 8001690:	080016ff 	.word	0x080016ff
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016c1 	.word	0x080016c1
 800169c:	4a82      	ldr	r2, [pc, #520]	; (80018a8 <HAL_GPIO_Init+0x2d8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016a2:	e02c      	b.n	80016fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e029      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	3304      	adds	r3, #4
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e024      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	3308      	adds	r3, #8
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e01f      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	330c      	adds	r3, #12
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e01a      	b.n	8001700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016d2:	2304      	movs	r3, #4
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e013      	b.n	8001700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e0:	2308      	movs	r3, #8
 80016e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	611a      	str	r2, [r3, #16]
          break;
 80016ea:	e009      	b.n	8001700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	615a      	str	r2, [r3, #20]
          break;
 80016f6:	e003      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x130>
          break;
 80016fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d801      	bhi.n	800170a <HAL_GPIO_Init+0x13a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	e001      	b.n	800170e <HAL_GPIO_Init+0x13e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d802      	bhi.n	800171c <HAL_GPIO_Init+0x14c>
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	e002      	b.n	8001722 <HAL_GPIO_Init+0x152>
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	3b08      	subs	r3, #8
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	210f      	movs	r1, #15
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	401a      	ands	r2, r3
 8001734:	6a39      	ldr	r1, [r7, #32]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8090 	beq.w	8001870 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001750:	4b56      	ldr	r3, [pc, #344]	; (80018ac <HAL_GPIO_Init+0x2dc>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a55      	ldr	r2, [pc, #340]	; (80018ac <HAL_GPIO_Init+0x2dc>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_GPIO_Init+0x2dc>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001768:	4a51      	ldr	r2, [pc, #324]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a49      	ldr	r2, [pc, #292]	; (80018b4 <HAL_GPIO_Init+0x2e4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00d      	beq.n	80017b0 <HAL_GPIO_Init+0x1e0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a48      	ldr	r2, [pc, #288]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0x1dc>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a47      	ldr	r2, [pc, #284]	; (80018bc <HAL_GPIO_Init+0x2ec>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_Init+0x1d8>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e004      	b.n	80017b2 <HAL_GPIO_Init+0x1e2>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x1e2>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_GPIO_Init+0x1e2>
 80017b0:	2300      	movs	r3, #0
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4093      	lsls	r3, r2
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c2:	493b      	ldr	r1, [pc, #236]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	4937      	ldr	r1, [pc, #220]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4933      	ldr	r1, [pc, #204]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001804:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	492d      	ldr	r1, [pc, #180]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	4929      	ldr	r1, [pc, #164]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 800181c:	4013      	ands	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4923      	ldr	r1, [pc, #140]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	491f      	ldr	r1, [pc, #124]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001844:	4013      	ands	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4919      	ldr	r1, [pc, #100]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	4915      	ldr	r1, [pc, #84]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 800186c:	4013      	ands	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	3301      	adds	r3, #1
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	f47f aeaf 	bne.w	80015e4 <HAL_GPIO_Init+0x14>
  }
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	372c      	adds	r7, #44	; 0x2c
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	10320000 	.word	0x10320000
 8001898:	10310000 	.word	0x10310000
 800189c:	10220000 	.word	0x10220000
 80018a0:	10210000 	.word	0x10210000
 80018a4:	10120000 	.word	0x10120000
 80018a8:	10110000 	.word	0x10110000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010000 	.word	0x40010000
 80018b4:	40010800 	.word	0x40010800
 80018b8:	40010c00 	.word	0x40010c00
 80018bc:	40011000 	.word	0x40011000
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	807b      	strh	r3, [r7, #2]
 80018fe:	4613      	mov	r3, r2
 8001900:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001902:	787b      	ldrb	r3, [r7, #1]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001908:	887a      	ldrh	r2, [r7, #2]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800190e:	e003      	b.n	8001918 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	041a      	lsls	r2, r3, #16
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	611a      	str	r2, [r3, #16]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001934:	887a      	ldrh	r2, [r7, #2]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	041a      	lsls	r2, r3, #16
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43d9      	mvns	r1, r3
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	400b      	ands	r3, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e26c      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8087 	beq.w	8001a82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001974:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b04      	cmp	r3, #4
 800197e:	d00c      	beq.n	800199a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001980:	4b8f      	ldr	r3, [pc, #572]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d112      	bne.n	80019b2 <HAL_RCC_OscConfig+0x5e>
 800198c:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d10b      	bne.n	80019b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199a:	4b89      	ldr	r3, [pc, #548]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d06c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x12c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d168      	bne.n	8001a80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e246      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x76>
 80019bc:	4b80      	ldr	r3, [pc, #512]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a7f      	ldr	r2, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e02e      	b.n	8001a28 <HAL_RCC_OscConfig+0xd4>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x98>
 80019d2:	4b7b      	ldr	r3, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7a      	ldr	r2, [pc, #488]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a77      	ldr	r2, [pc, #476]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e01d      	b.n	8001a28 <HAL_RCC_OscConfig+0xd4>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0xbc>
 80019f6:	4b72      	ldr	r3, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a71      	ldr	r2, [pc, #452]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xd4>
 8001a10:	4b6b      	ldr	r3, [pc, #428]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a6a      	ldr	r2, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a67      	ldr	r2, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f9f2 	bl	8000e18 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff f9ee 	bl	8000e18 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1fa      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0xe4>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f9de 	bl	8000e18 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff f9da 	bl	8000e18 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1e6      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x10c>
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d063      	beq.n	8001b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8e:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a9a:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d11c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x18c>
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d116      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x176>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e1ba      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4939      	ldr	r1, [pc, #228]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	e03a      	b.n	8001b56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff f993 	bl	8000e18 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff f98f 	bl	8000e18 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e19b      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4927      	ldr	r1, [pc, #156]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff f972 	bl	8000e18 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b38:	f7ff f96e 	bl	8000e18 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e17a      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d03a      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d019      	beq.n	8001b9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7ff f952 	bl	8000e18 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f94e 	bl	8000e18 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e15a      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f000 facc 	bl	8002134 <RCC_Delay>
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f938 	bl	8000e18 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001baa:	e00f      	b.n	8001bcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f934 	bl	8000e18 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d908      	bls.n	8001bcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e140      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	42420000 	.word	0x42420000
 8001bc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b9e      	ldr	r3, [pc, #632]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1e9      	bne.n	8001bac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a6 	beq.w	8001d32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b97      	ldr	r3, [pc, #604]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10d      	bne.n	8001c12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b94      	ldr	r3, [pc, #592]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a93      	ldr	r2, [pc, #588]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b8e      	ldr	r3, [pc, #568]	; (8001e4c <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d118      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1e:	4b8b      	ldr	r3, [pc, #556]	; (8001e4c <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a8a      	ldr	r2, [pc, #552]	; (8001e4c <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f8f5 	bl	8000e18 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c32:	f7ff f8f1 	bl	8000e18 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b64      	cmp	r3, #100	; 0x64
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0fd      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b81      	ldr	r3, [pc, #516]	; (8001e4c <HAL_RCC_OscConfig+0x4f8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x312>
 8001c58:	4b7b      	ldr	r3, [pc, #492]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4a7a      	ldr	r2, [pc, #488]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6213      	str	r3, [r2, #32]
 8001c64:	e02d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x36e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x334>
 8001c6e:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a75      	ldr	r2, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a72      	ldr	r2, [pc, #456]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6213      	str	r3, [r2, #32]
 8001c86:	e01c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x36e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d10c      	bne.n	8001caa <HAL_RCC_OscConfig+0x356>
 8001c90:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4a6c      	ldr	r2, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6213      	str	r3, [r2, #32]
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	e00b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x36e>
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4a66      	ldr	r2, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	6213      	str	r3, [r2, #32]
 8001cb6:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a63      	ldr	r2, [pc, #396]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d015      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff f8a5 	bl	8000e18 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff f8a1 	bl	8000e18 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0ab      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ee      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x37e>
 8001cf4:	e014      	b.n	8001d20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f88f 	bl	8000e18 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff f88b 	bl	8000e18 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e095      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d14:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ee      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d105      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d26:	4b48      	ldr	r3, [pc, #288]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a47      	ldr	r2, [pc, #284]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8081 	beq.w	8001e3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d061      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d146      	bne.n	8001dde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_OscConfig+0x4fc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff f85f 	bl	8000e18 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f85b 	bl	8000e18 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e067      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d70:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d108      	bne.n	8001d98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	492d      	ldr	r1, [pc, #180]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a19      	ldr	r1, [r3, #32]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	430b      	orrs	r3, r1
 8001daa:	4927      	ldr	r1, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x4fc>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff f82f 	bl	8000e18 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff f82b 	bl	8000e18 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e037      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x46a>
 8001ddc:	e02f      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_RCC_OscConfig+0x4fc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff f818 	bl	8000e18 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f814 	bl	8000e18 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e020      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x498>
 8001e0a:	e018      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e013      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	42420060 	.word	0x42420060

08001e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0d0      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d910      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 0207 	bic.w	r2, r3, #7
 8001e7e:	4965      	ldr	r1, [pc, #404]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b63      	ldr	r3, [pc, #396]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0b8      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb0:	4b59      	ldr	r3, [pc, #356]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ed2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b50      	ldr	r3, [pc, #320]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	494d      	ldr	r1, [pc, #308]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d040      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d115      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e07f      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e073      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e06b      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f32:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f023 0203 	bic.w	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4936      	ldr	r1, [pc, #216]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f44:	f7fe ff68 	bl	8000e18 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7fe ff64 	bl	8000e18 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e053      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 020c 	and.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1eb      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d210      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0207 	bic.w	r2, r3, #7
 8001f8a:	4922      	ldr	r1, [pc, #136]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e032      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4916      	ldr	r1, [pc, #88]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	490e      	ldr	r1, [pc, #56]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fe2:	f000 f821 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	490a      	ldr	r1, [pc, #40]	; (800201c <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	5ccb      	ldrb	r3, [r1, r3]
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1cc>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1d0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fec6 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000
 8002018:	40021000 	.word	0x40021000
 800201c:	08004094 	.word	0x08004094
 8002020:	20000008 	.word	0x20000008
 8002024:	2000000c 	.word	0x2000000c

08002028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x30>
 8002052:	2b08      	cmp	r3, #8
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x36>
 8002056:	e027      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800205a:	613b      	str	r3, [r7, #16]
      break;
 800205c:	e027      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	0c9b      	lsrs	r3, r3, #18
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	0c5b      	lsrs	r3, r3, #17
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800208a:	fb02 f203 	mul.w	r2, r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e004      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	613b      	str	r3, [r7, #16]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020aa:	613b      	str	r3, [r7, #16]
      break;
 80020ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ae:	693b      	ldr	r3, [r7, #16]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	080040ac 	.word	0x080040ac
 80020c8:	080040bc 	.word	0x080040bc
 80020cc:	003d0900 	.word	0x003d0900

080020d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000008 	.word	0x20000008

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e8:	f7ff fff2 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	080040a4 	.word	0x080040a4

0800210c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002110:	f7ff ffde 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	0adb      	lsrs	r3, r3, #11
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4903      	ldr	r1, [pc, #12]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	080040a4 	.word	0x080040a4

08002134 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <RCC_Delay+0x34>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <RCC_Delay+0x38>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0a5b      	lsrs	r3, r3, #9
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002150:	bf00      	nop
  }
  while (Delay --);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	60fa      	str	r2, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f9      	bne.n	8002150 <RCC_Delay+0x1c>
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	20000008 	.word	0x20000008
 800216c:	10624dd3 	.word	0x10624dd3

08002170 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d07d      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4a4b      	ldr	r2, [pc, #300]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a6:	61d3      	str	r3, [r2, #28]
 80021a8:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d118      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a42      	ldr	r2, [pc, #264]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d0:	f7fe fe22 	bl	8000e18 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	e008      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d8:	f7fe fe1e 	bl	8000e18 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e06d      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02e      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d027      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002224:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800222a:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d014      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fded 	bl	8000e18 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fde9 	bl	8000e18 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e036      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ee      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4917      	ldr	r1, [pc, #92]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	4313      	orrs	r3, r2
 8002274:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002286:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	490b      	ldr	r1, [pc, #44]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4904      	ldr	r1, [pc, #16]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
 80022d8:	42420440 	.word	0x42420440

080022dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e041      	b.n	8002372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fc1c 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 fa6e 	bl	80027fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d001      	beq.n	8002394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e035      	b.n	8002400 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_TIM_Base_Start_IT+0x90>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_TIM_Base_Start_IT+0x4e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023be:	d004      	beq.n	80023ca <HAL_TIM_Base_Start_IT+0x4e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <HAL_TIM_Base_Start_IT+0x94>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d111      	bne.n	80023ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d010      	beq.n	80023fe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ec:	e007      	b.n	80023fe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40000400 	.word	0x40000400

08002414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b02      	cmp	r3, #2
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0202 	mvn.w	r2, #2
 8002440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f9b4 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f9a7 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f9b6 	bl	80027d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b04      	cmp	r3, #4
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0204 	mvn.w	r2, #4
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f98a 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f97d 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f98c 	bl	80027d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0208 	mvn.w	r2, #8
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f960 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f953 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f962 	bl	80027d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b10      	cmp	r3, #16
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b10      	cmp	r3, #16
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0210 	mvn.w	r2, #16
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2208      	movs	r2, #8
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f936 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f929 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f938 	bl	80027d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0201 	mvn.w	r2, #1
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe f8e6 	bl	8000764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b80      	cmp	r3, #128	; 0x80
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa6b 	bl	8002a9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f8fc 	bl	80027e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0220 	mvn.w	r2, #32
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa36 	bl	8002a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_TIM_ConfigClockSource+0x1c>
 800263c:	2302      	movs	r3, #2
 800263e:	e0b4      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x186>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002678:	d03e      	beq.n	80026f8 <HAL_TIM_ConfigClockSource+0xd4>
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267e:	f200 8087 	bhi.w	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	f000 8086 	beq.w	8002796 <HAL_TIM_ConfigClockSource+0x172>
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d87f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d01a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0xa6>
 8002694:	2b70      	cmp	r3, #112	; 0x70
 8002696:	d87b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d050      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x11a>
 800269c:	2b60      	cmp	r3, #96	; 0x60
 800269e:	d877      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b50      	cmp	r3, #80	; 0x50
 80026a2:	d03c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xfa>
 80026a4:	2b50      	cmp	r3, #80	; 0x50
 80026a6:	d873      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d058      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x13a>
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d86f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b30      	cmp	r3, #48	; 0x30
 80026b2:	d064      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026b4:	2b30      	cmp	r3, #48	; 0x30
 80026b6:	d86b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d060      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d867      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05c      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d05a      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026c8:	e062      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f000 f95e 	bl	800299a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	609a      	str	r2, [r3, #8]
      break;
 80026f6:	e04f      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f000 f947 	bl	800299a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271a:	609a      	str	r2, [r3, #8]
      break;
 800271c:	e03c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f000 f8be 	bl	80028ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2150      	movs	r1, #80	; 0x50
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f915 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 800273c:	e02c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	461a      	mov	r2, r3
 800274c:	f000 f8dc 	bl	8002908 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2160      	movs	r1, #96	; 0x60
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f905 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 800275c:	e01c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	461a      	mov	r2, r3
 800276c:	f000 f89e 	bl	80028ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2140      	movs	r1, #64	; 0x40
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f8f5 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 800277c:	e00c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 f8ec 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 800278e:	e003      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e000      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
	...

080027fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <TIM_Base_SetConfig+0xa8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <TIM_Base_SetConfig+0x28>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d003      	beq.n	8002824 <TIM_Base_SetConfig+0x28>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <TIM_Base_SetConfig+0xac>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d108      	bne.n	8002836 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <TIM_Base_SetConfig+0xa8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <TIM_Base_SetConfig+0x52>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d003      	beq.n	800284e <TIM_Base_SetConfig+0x52>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <TIM_Base_SetConfig+0xac>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d108      	bne.n	8002860 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <TIM_Base_SetConfig+0xa8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d103      	bne.n	8002894 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	615a      	str	r2, [r3, #20]
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40000400 	.word	0x40000400

080028ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f023 0201 	bic.w	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f023 030a 	bic.w	r3, r3, #10
 80028e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f023 0210 	bic.w	r2, r3, #16
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	031b      	lsls	r3, r3, #12
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002944:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	621a      	str	r2, [r3, #32]
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	f043 0307 	orr.w	r3, r3, #7
 8002988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	609a      	str	r2, [r3, #8]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	021a      	lsls	r2, r3, #8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	431a      	orrs	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	609a      	str	r2, [r3, #8]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e041      	b.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d004      	beq.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10c      	bne.n	8002a62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40000400 	.word	0x40000400

08002a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e042      	b.n	8002b44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe f858 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fdc5 	bl	8003680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d16d      	bne.n	8002c48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_UART_Transmit+0x2c>
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e066      	b.n	8002c4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2221      	movs	r2, #33	; 0x21
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe f945 	bl	8000e18 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d108      	bne.n	8002bb8 <HAL_UART_Transmit+0x6c>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bc0:	e02a      	b.n	8002c18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fb14 	bl	80031fa <UART_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e036      	b.n	8002c4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10b      	bne.n	8002bfa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	e007      	b.n	8002c0a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	3301      	adds	r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1cf      	bne.n	8002bc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2140      	movs	r1, #64	; 0x40
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fae4 	bl	80031fa <UART_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e006      	b.n	8002c4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
  }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d112      	bne.n	8002c92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_UART_Receive_IT+0x26>
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e00b      	b.n	8002c94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	461a      	mov	r2, r3
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fb24 	bl	80032d6 <UART_Start_Receive_IT>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	e000      	b.n	8002c94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
  }
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0ba      	sub	sp, #232	; 0xe8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_UART_IRQHandler+0x66>
 8002cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fc01 	bl	8003502 <UART_Receive_IT>
      return;
 8002d00:	e25b      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80de 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x22c>
 8002d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d106      	bne.n	8002d26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80d1 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_UART_IRQHandler+0xae>
 8002d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_UART_IRQHandler+0xd2>
 8002d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f043 0202 	orr.w	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0xf6>
 8002d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d011      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x126>
 8002d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f043 0208 	orr.w	r2, r3, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 81f2 	beq.w	80031b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_UART_IRQHandler+0x14e>
 8002dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fb8c 	bl	8003502 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_UART_IRQHandler+0x17a>
 8002e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d04f      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa96 	bl	8003348 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d041      	beq.n	8002eae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3314      	adds	r3, #20
 8002e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1d9      	bne.n	8002e2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d013      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	4a7e      	ldr	r2, [pc, #504]	; (800307c <HAL_UART_IRQHandler+0x3e0>)
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fb28 	bl	80014e0 <HAL_DMA_Abort_IT>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	e00e      	b.n	8002ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f993 	bl	80031d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	e00a      	b.n	8002ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f98f 	bl	80031d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e006      	b.n	8002ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f98b 	bl	80031d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ec2:	e175      	b.n	80031b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	bf00      	nop
    return;
 8002ec6:	e173      	b.n	80031b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	f040 814f 	bne.w	8003170 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8148 	beq.w	8003170 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8141 	beq.w	8003170 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80b6 	beq.w	8003080 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8145 	beq.w	80031b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f32:	429a      	cmp	r2, r3
 8002f34:	f080 813e 	bcs.w	80031b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	f000 8088 	beq.w	800305c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f5a:	e853 3f00 	ldrex	r3, [r3]
 8002f5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f78:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f88:	e841 2300 	strex	r3, r2, [r1]
 8002f8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1d9      	bne.n	8002f4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fbc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e1      	bne.n	8002f98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3314      	adds	r3, #20
 8002ff4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ff8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ffe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e3      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800302a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302c:	f023 0310 	bic.w	r3, r3, #16
 8003030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800303e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003040:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800304c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e3      	bne.n	800301a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fa07 	bl	800146a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800306a:	b29b      	uxth	r3, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	b29b      	uxth	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8b6 	bl	80031e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003078:	e09c      	b.n	80031b4 <HAL_UART_IRQHandler+0x518>
 800307a:	bf00      	nop
 800307c:	0800340d 	.word	0x0800340d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003088:	b29b      	uxth	r3, r3
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 808e 	beq.w	80031b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800309c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8089 	beq.w	80031b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030ca:	647a      	str	r2, [r7, #68]	; 0x44
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e3      	bne.n	80030a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	623b      	str	r3, [r7, #32]
   return(result);
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3314      	adds	r3, #20
 80030fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003102:	633a      	str	r2, [r7, #48]	; 0x30
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e3      	bne.n	80030de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	60fb      	str	r3, [r7, #12]
   return(result);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0310 	bic.w	r3, r3, #16
 800313a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	617b      	str	r3, [r7, #20]
   return(result);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e3      	bne.n	8003124 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003166:	4619      	mov	r1, r3
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f83b 	bl	80031e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800316e:	e023      	b.n	80031b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_UART_IRQHandler+0x4f4>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f953 	bl	8003434 <UART_Transmit_IT>
    return;
 800318e:	e014      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00e      	beq.n	80031ba <HAL_UART_IRQHandler+0x51e>
 800319c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f992 	bl	80034d2 <UART_EndTransmit_IT>
    return;
 80031ae:	e004      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
    return;
 80031b0:	bf00      	nop
 80031b2:	e002      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
      return;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
      return;
 80031b8:	bf00      	nop
  }
}
 80031ba:	37e8      	adds	r7, #232	; 0xe8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b090      	sub	sp, #64	; 0x40
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320a:	e050      	b.n	80032ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d04c      	beq.n	80032ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <UART_WaitOnFlagUntilTimeout+0x30>
 800321a:	f7fd fdfd 	bl	8000e18 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003226:	429a      	cmp	r2, r3
 8003228:	d241      	bcs.n	80032ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800324a:	637a      	str	r2, [r7, #52]	; 0x34
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e5      	bne.n	800322a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	613b      	str	r3, [r7, #16]
   return(result);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	63bb      	str	r3, [r7, #56]	; 0x38
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3314      	adds	r3, #20
 800327c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800327e:	623a      	str	r2, [r7, #32]
 8003280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	69f9      	ldr	r1, [r7, #28]
 8003284:	6a3a      	ldr	r2, [r7, #32]
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	61bb      	str	r3, [r7, #24]
   return(result);
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e5      	bne.n	800325e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e00f      	b.n	80032ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4013      	ands	r3, r2
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	bf0c      	ite	eq
 80032be:	2301      	moveq	r3, #1
 80032c0:	2300      	movne	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d09f      	beq.n	800320c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3740      	adds	r7, #64	; 0x40
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	4613      	mov	r3, r2
 80032e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	88fa      	ldrh	r2, [r7, #6]
 80032ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2222      	movs	r2, #34	; 0x22
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0220 	orr.w	r2, r2, #32
 800333a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b095      	sub	sp, #84	; 0x54
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003370:	643a      	str	r2, [r7, #64]	; 0x40
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e5      	bne.n	8003350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	61fb      	str	r3, [r7, #28]
   return(result);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3314      	adds	r3, #20
 80033a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e5      	bne.n	8003384 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d119      	bne.n	80033f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f023 0310 	bic.w	r3, r3, #16
 80033d6:	647b      	str	r3, [r7, #68]	; 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033e0:	61ba      	str	r2, [r7, #24]
 80033e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6979      	ldr	r1, [r7, #20]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	613b      	str	r3, [r7, #16]
   return(result);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e5      	bne.n	80033c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003402:	bf00      	nop
 8003404:	3754      	adds	r7, #84	; 0x54
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff fed3 	bl	80031d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b21      	cmp	r3, #33	; 0x21
 8003446:	d13e      	bne.n	80034c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003450:	d114      	bne.n	800347c <UART_Transmit_IT+0x48>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d110      	bne.n	800347c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]
 800347a:	e008      	b.n	800348e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	1c59      	adds	r1, r3, #1
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6211      	str	r1, [r2, #32]
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29b      	uxth	r3, r3
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4619      	mov	r1, r3
 800349c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fe64 	bl	80031c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08c      	sub	sp, #48	; 0x30
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b22      	cmp	r3, #34	; 0x22
 8003514:	f040 80ae 	bne.w	8003674 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003520:	d117      	bne.n	8003552 <UART_Receive_IT+0x50>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d113      	bne.n	8003552 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	b29a      	uxth	r2, r3
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	1c9a      	adds	r2, r3, #2
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
 8003550:	e026      	b.n	80035a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003564:	d007      	beq.n	8003576 <UART_Receive_IT+0x74>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <UART_Receive_IT+0x82>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e008      	b.n	8003596 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003590:	b2da      	uxtb	r2, r3
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4619      	mov	r1, r3
 80035ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d15d      	bne.n	8003670 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0220 	bic.w	r2, r2, #32
 80035c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d135      	bne.n	8003666 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	613b      	str	r3, [r7, #16]
   return(result);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	623a      	str	r2, [r7, #32]
 8003622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	69f9      	ldr	r1, [r7, #28]
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	61bb      	str	r3, [r7, #24]
   return(result);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b10      	cmp	r3, #16
 8003640:	d10a      	bne.n	8003658 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fdc0 	bl	80031e4 <HAL_UARTEx_RxEventCallback>
 8003664:	e002      	b.n	800366c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fc fea0 	bl	80003ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e002      	b.n	8003676 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3730      	adds	r7, #48	; 0x30
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ba:	f023 030c 	bic.w	r3, r3, #12
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	430b      	orrs	r3, r1
 80036c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <UART_SetConfig+0x114>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7fe fd10 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	e002      	b.n	80036f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7fe fcf8 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80036f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009a      	lsls	r2, r3, #2
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <UART_SetConfig+0x118>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	0119      	lsls	r1, r3, #4
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009a      	lsls	r2, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	fbb2 f2f3 	udiv	r2, r2, r3
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <UART_SetConfig+0x118>)
 800372e:	fba3 0302 	umull	r0, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2064      	movs	r0, #100	; 0x64
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	3332      	adds	r3, #50	; 0x32
 8003740:	4a15      	ldr	r2, [pc, #84]	; (8003798 <UART_SetConfig+0x118>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374c:	4419      	add	r1, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009a      	lsls	r2, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fbb2 f2f3 	udiv	r2, r2, r3
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <UART_SetConfig+0x118>)
 8003766:	fba3 0302 	umull	r0, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2064      	movs	r0, #100	; 0x64
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	3332      	adds	r3, #50	; 0x32
 8003778:	4a07      	ldr	r2, [pc, #28]	; (8003798 <UART_SetConfig+0x118>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	440a      	add	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40013800 	.word	0x40013800
 8003798:	51eb851f 	.word	0x51eb851f

0800379c <__errno>:
 800379c:	4b01      	ldr	r3, [pc, #4]	; (80037a4 <__errno+0x8>)
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000014 	.word	0x20000014

080037a8 <__libc_init_array>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	2600      	movs	r6, #0
 80037ac:	4d0c      	ldr	r5, [pc, #48]	; (80037e0 <__libc_init_array+0x38>)
 80037ae:	4c0d      	ldr	r4, [pc, #52]	; (80037e4 <__libc_init_array+0x3c>)
 80037b0:	1b64      	subs	r4, r4, r5
 80037b2:	10a4      	asrs	r4, r4, #2
 80037b4:	42a6      	cmp	r6, r4
 80037b6:	d109      	bne.n	80037cc <__libc_init_array+0x24>
 80037b8:	f000 fc5c 	bl	8004074 <_init>
 80037bc:	2600      	movs	r6, #0
 80037be:	4d0a      	ldr	r5, [pc, #40]	; (80037e8 <__libc_init_array+0x40>)
 80037c0:	4c0a      	ldr	r4, [pc, #40]	; (80037ec <__libc_init_array+0x44>)
 80037c2:	1b64      	subs	r4, r4, r5
 80037c4:	10a4      	asrs	r4, r4, #2
 80037c6:	42a6      	cmp	r6, r4
 80037c8:	d105      	bne.n	80037d6 <__libc_init_array+0x2e>
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d0:	4798      	blx	r3
 80037d2:	3601      	adds	r6, #1
 80037d4:	e7ee      	b.n	80037b4 <__libc_init_array+0xc>
 80037d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037da:	4798      	blx	r3
 80037dc:	3601      	adds	r6, #1
 80037de:	e7f2      	b.n	80037c6 <__libc_init_array+0x1e>
 80037e0:	080040f4 	.word	0x080040f4
 80037e4:	080040f4 	.word	0x080040f4
 80037e8:	080040f4 	.word	0x080040f4
 80037ec:	080040f8 	.word	0x080040f8

080037f0 <memset>:
 80037f0:	4603      	mov	r3, r0
 80037f2:	4402      	add	r2, r0
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d100      	bne.n	80037fa <memset+0xa>
 80037f8:	4770      	bx	lr
 80037fa:	f803 1b01 	strb.w	r1, [r3], #1
 80037fe:	e7f9      	b.n	80037f4 <memset+0x4>

08003800 <siprintf>:
 8003800:	b40e      	push	{r1, r2, r3}
 8003802:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003806:	b500      	push	{lr}
 8003808:	b09c      	sub	sp, #112	; 0x70
 800380a:	ab1d      	add	r3, sp, #116	; 0x74
 800380c:	9002      	str	r0, [sp, #8]
 800380e:	9006      	str	r0, [sp, #24]
 8003810:	9107      	str	r1, [sp, #28]
 8003812:	9104      	str	r1, [sp, #16]
 8003814:	4808      	ldr	r0, [pc, #32]	; (8003838 <siprintf+0x38>)
 8003816:	4909      	ldr	r1, [pc, #36]	; (800383c <siprintf+0x3c>)
 8003818:	f853 2b04 	ldr.w	r2, [r3], #4
 800381c:	9105      	str	r1, [sp, #20]
 800381e:	6800      	ldr	r0, [r0, #0]
 8003820:	a902      	add	r1, sp, #8
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	f000 f868 	bl	80038f8 <_svfiprintf_r>
 8003828:	2200      	movs	r2, #0
 800382a:	9b02      	ldr	r3, [sp, #8]
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	b01c      	add	sp, #112	; 0x70
 8003830:	f85d eb04 	ldr.w	lr, [sp], #4
 8003834:	b003      	add	sp, #12
 8003836:	4770      	bx	lr
 8003838:	20000014 	.word	0x20000014
 800383c:	ffff0208 	.word	0xffff0208

08003840 <__ssputs_r>:
 8003840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003844:	688e      	ldr	r6, [r1, #8]
 8003846:	4682      	mov	sl, r0
 8003848:	429e      	cmp	r6, r3
 800384a:	460c      	mov	r4, r1
 800384c:	4690      	mov	r8, r2
 800384e:	461f      	mov	r7, r3
 8003850:	d838      	bhi.n	80038c4 <__ssputs_r+0x84>
 8003852:	898a      	ldrh	r2, [r1, #12]
 8003854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003858:	d032      	beq.n	80038c0 <__ssputs_r+0x80>
 800385a:	6825      	ldr	r5, [r4, #0]
 800385c:	6909      	ldr	r1, [r1, #16]
 800385e:	3301      	adds	r3, #1
 8003860:	eba5 0901 	sub.w	r9, r5, r1
 8003864:	6965      	ldr	r5, [r4, #20]
 8003866:	444b      	add	r3, r9
 8003868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800386c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003870:	106d      	asrs	r5, r5, #1
 8003872:	429d      	cmp	r5, r3
 8003874:	bf38      	it	cc
 8003876:	461d      	movcc	r5, r3
 8003878:	0553      	lsls	r3, r2, #21
 800387a:	d531      	bpl.n	80038e0 <__ssputs_r+0xa0>
 800387c:	4629      	mov	r1, r5
 800387e:	f000 fb53 	bl	8003f28 <_malloc_r>
 8003882:	4606      	mov	r6, r0
 8003884:	b950      	cbnz	r0, 800389c <__ssputs_r+0x5c>
 8003886:	230c      	movs	r3, #12
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	f8ca 3000 	str.w	r3, [sl]
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389c:	464a      	mov	r2, r9
 800389e:	6921      	ldr	r1, [r4, #16]
 80038a0:	f000 face 	bl	8003e40 <memcpy>
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ae:	81a3      	strh	r3, [r4, #12]
 80038b0:	6126      	str	r6, [r4, #16]
 80038b2:	444e      	add	r6, r9
 80038b4:	6026      	str	r6, [r4, #0]
 80038b6:	463e      	mov	r6, r7
 80038b8:	6165      	str	r5, [r4, #20]
 80038ba:	eba5 0509 	sub.w	r5, r5, r9
 80038be:	60a5      	str	r5, [r4, #8]
 80038c0:	42be      	cmp	r6, r7
 80038c2:	d900      	bls.n	80038c6 <__ssputs_r+0x86>
 80038c4:	463e      	mov	r6, r7
 80038c6:	4632      	mov	r2, r6
 80038c8:	4641      	mov	r1, r8
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	f000 fac6 	bl	8003e5c <memmove>
 80038d0:	68a3      	ldr	r3, [r4, #8]
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	1b9b      	subs	r3, r3, r6
 80038d6:	4432      	add	r2, r6
 80038d8:	2000      	movs	r0, #0
 80038da:	60a3      	str	r3, [r4, #8]
 80038dc:	6022      	str	r2, [r4, #0]
 80038de:	e7db      	b.n	8003898 <__ssputs_r+0x58>
 80038e0:	462a      	mov	r2, r5
 80038e2:	f000 fb7b 	bl	8003fdc <_realloc_r>
 80038e6:	4606      	mov	r6, r0
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d1e1      	bne.n	80038b0 <__ssputs_r+0x70>
 80038ec:	4650      	mov	r0, sl
 80038ee:	6921      	ldr	r1, [r4, #16]
 80038f0:	f000 face 	bl	8003e90 <_free_r>
 80038f4:	e7c7      	b.n	8003886 <__ssputs_r+0x46>
	...

080038f8 <_svfiprintf_r>:
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	4698      	mov	r8, r3
 80038fe:	898b      	ldrh	r3, [r1, #12]
 8003900:	4607      	mov	r7, r0
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	460d      	mov	r5, r1
 8003906:	4614      	mov	r4, r2
 8003908:	b09d      	sub	sp, #116	; 0x74
 800390a:	d50e      	bpl.n	800392a <_svfiprintf_r+0x32>
 800390c:	690b      	ldr	r3, [r1, #16]
 800390e:	b963      	cbnz	r3, 800392a <_svfiprintf_r+0x32>
 8003910:	2140      	movs	r1, #64	; 0x40
 8003912:	f000 fb09 	bl	8003f28 <_malloc_r>
 8003916:	6028      	str	r0, [r5, #0]
 8003918:	6128      	str	r0, [r5, #16]
 800391a:	b920      	cbnz	r0, 8003926 <_svfiprintf_r+0x2e>
 800391c:	230c      	movs	r3, #12
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	e0d1      	b.n	8003aca <_svfiprintf_r+0x1d2>
 8003926:	2340      	movs	r3, #64	; 0x40
 8003928:	616b      	str	r3, [r5, #20]
 800392a:	2300      	movs	r3, #0
 800392c:	9309      	str	r3, [sp, #36]	; 0x24
 800392e:	2320      	movs	r3, #32
 8003930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003934:	2330      	movs	r3, #48	; 0x30
 8003936:	f04f 0901 	mov.w	r9, #1
 800393a:	f8cd 800c 	str.w	r8, [sp, #12]
 800393e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ae4 <_svfiprintf_r+0x1ec>
 8003942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003946:	4623      	mov	r3, r4
 8003948:	469a      	mov	sl, r3
 800394a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800394e:	b10a      	cbz	r2, 8003954 <_svfiprintf_r+0x5c>
 8003950:	2a25      	cmp	r2, #37	; 0x25
 8003952:	d1f9      	bne.n	8003948 <_svfiprintf_r+0x50>
 8003954:	ebba 0b04 	subs.w	fp, sl, r4
 8003958:	d00b      	beq.n	8003972 <_svfiprintf_r+0x7a>
 800395a:	465b      	mov	r3, fp
 800395c:	4622      	mov	r2, r4
 800395e:	4629      	mov	r1, r5
 8003960:	4638      	mov	r0, r7
 8003962:	f7ff ff6d 	bl	8003840 <__ssputs_r>
 8003966:	3001      	adds	r0, #1
 8003968:	f000 80aa 	beq.w	8003ac0 <_svfiprintf_r+0x1c8>
 800396c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800396e:	445a      	add	r2, fp
 8003970:	9209      	str	r2, [sp, #36]	; 0x24
 8003972:	f89a 3000 	ldrb.w	r3, [sl]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80a2 	beq.w	8003ac0 <_svfiprintf_r+0x1c8>
 800397c:	2300      	movs	r3, #0
 800397e:	f04f 32ff 	mov.w	r2, #4294967295
 8003982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003986:	f10a 0a01 	add.w	sl, sl, #1
 800398a:	9304      	str	r3, [sp, #16]
 800398c:	9307      	str	r3, [sp, #28]
 800398e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003992:	931a      	str	r3, [sp, #104]	; 0x68
 8003994:	4654      	mov	r4, sl
 8003996:	2205      	movs	r2, #5
 8003998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800399c:	4851      	ldr	r0, [pc, #324]	; (8003ae4 <_svfiprintf_r+0x1ec>)
 800399e:	f000 fa41 	bl	8003e24 <memchr>
 80039a2:	9a04      	ldr	r2, [sp, #16]
 80039a4:	b9d8      	cbnz	r0, 80039de <_svfiprintf_r+0xe6>
 80039a6:	06d0      	lsls	r0, r2, #27
 80039a8:	bf44      	itt	mi
 80039aa:	2320      	movmi	r3, #32
 80039ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b0:	0711      	lsls	r1, r2, #28
 80039b2:	bf44      	itt	mi
 80039b4:	232b      	movmi	r3, #43	; 0x2b
 80039b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ba:	f89a 3000 	ldrb.w	r3, [sl]
 80039be:	2b2a      	cmp	r3, #42	; 0x2a
 80039c0:	d015      	beq.n	80039ee <_svfiprintf_r+0xf6>
 80039c2:	4654      	mov	r4, sl
 80039c4:	2000      	movs	r0, #0
 80039c6:	f04f 0c0a 	mov.w	ip, #10
 80039ca:	9a07      	ldr	r2, [sp, #28]
 80039cc:	4621      	mov	r1, r4
 80039ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039d2:	3b30      	subs	r3, #48	; 0x30
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	d94e      	bls.n	8003a76 <_svfiprintf_r+0x17e>
 80039d8:	b1b0      	cbz	r0, 8003a08 <_svfiprintf_r+0x110>
 80039da:	9207      	str	r2, [sp, #28]
 80039dc:	e014      	b.n	8003a08 <_svfiprintf_r+0x110>
 80039de:	eba0 0308 	sub.w	r3, r0, r8
 80039e2:	fa09 f303 	lsl.w	r3, r9, r3
 80039e6:	4313      	orrs	r3, r2
 80039e8:	46a2      	mov	sl, r4
 80039ea:	9304      	str	r3, [sp, #16]
 80039ec:	e7d2      	b.n	8003994 <_svfiprintf_r+0x9c>
 80039ee:	9b03      	ldr	r3, [sp, #12]
 80039f0:	1d19      	adds	r1, r3, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	9103      	str	r1, [sp, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bfbb      	ittet	lt
 80039fa:	425b      	neglt	r3, r3
 80039fc:	f042 0202 	orrlt.w	r2, r2, #2
 8003a00:	9307      	strge	r3, [sp, #28]
 8003a02:	9307      	strlt	r3, [sp, #28]
 8003a04:	bfb8      	it	lt
 8003a06:	9204      	strlt	r2, [sp, #16]
 8003a08:	7823      	ldrb	r3, [r4, #0]
 8003a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a0c:	d10c      	bne.n	8003a28 <_svfiprintf_r+0x130>
 8003a0e:	7863      	ldrb	r3, [r4, #1]
 8003a10:	2b2a      	cmp	r3, #42	; 0x2a
 8003a12:	d135      	bne.n	8003a80 <_svfiprintf_r+0x188>
 8003a14:	9b03      	ldr	r3, [sp, #12]
 8003a16:	3402      	adds	r4, #2
 8003a18:	1d1a      	adds	r2, r3, #4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	9203      	str	r2, [sp, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bfb8      	it	lt
 8003a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a26:	9305      	str	r3, [sp, #20]
 8003a28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003af4 <_svfiprintf_r+0x1fc>
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	4650      	mov	r0, sl
 8003a30:	7821      	ldrb	r1, [r4, #0]
 8003a32:	f000 f9f7 	bl	8003e24 <memchr>
 8003a36:	b140      	cbz	r0, 8003a4a <_svfiprintf_r+0x152>
 8003a38:	2340      	movs	r3, #64	; 0x40
 8003a3a:	eba0 000a 	sub.w	r0, r0, sl
 8003a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a42:	9b04      	ldr	r3, [sp, #16]
 8003a44:	3401      	adds	r4, #1
 8003a46:	4303      	orrs	r3, r0
 8003a48:	9304      	str	r3, [sp, #16]
 8003a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4e:	2206      	movs	r2, #6
 8003a50:	4825      	ldr	r0, [pc, #148]	; (8003ae8 <_svfiprintf_r+0x1f0>)
 8003a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a56:	f000 f9e5 	bl	8003e24 <memchr>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d038      	beq.n	8003ad0 <_svfiprintf_r+0x1d8>
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <_svfiprintf_r+0x1f4>)
 8003a60:	bb1b      	cbnz	r3, 8003aaa <_svfiprintf_r+0x1b2>
 8003a62:	9b03      	ldr	r3, [sp, #12]
 8003a64:	3307      	adds	r3, #7
 8003a66:	f023 0307 	bic.w	r3, r3, #7
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	9303      	str	r3, [sp, #12]
 8003a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a70:	4433      	add	r3, r6
 8003a72:	9309      	str	r3, [sp, #36]	; 0x24
 8003a74:	e767      	b.n	8003946 <_svfiprintf_r+0x4e>
 8003a76:	460c      	mov	r4, r1
 8003a78:	2001      	movs	r0, #1
 8003a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a7e:	e7a5      	b.n	80039cc <_svfiprintf_r+0xd4>
 8003a80:	2300      	movs	r3, #0
 8003a82:	f04f 0c0a 	mov.w	ip, #10
 8003a86:	4619      	mov	r1, r3
 8003a88:	3401      	adds	r4, #1
 8003a8a:	9305      	str	r3, [sp, #20]
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a92:	3a30      	subs	r2, #48	; 0x30
 8003a94:	2a09      	cmp	r2, #9
 8003a96:	d903      	bls.n	8003aa0 <_svfiprintf_r+0x1a8>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0c5      	beq.n	8003a28 <_svfiprintf_r+0x130>
 8003a9c:	9105      	str	r1, [sp, #20]
 8003a9e:	e7c3      	b.n	8003a28 <_svfiprintf_r+0x130>
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aa8:	e7f0      	b.n	8003a8c <_svfiprintf_r+0x194>
 8003aaa:	ab03      	add	r3, sp, #12
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	462a      	mov	r2, r5
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <_svfiprintf_r+0x1f8>)
 8003ab4:	a904      	add	r1, sp, #16
 8003ab6:	f3af 8000 	nop.w
 8003aba:	1c42      	adds	r2, r0, #1
 8003abc:	4606      	mov	r6, r0
 8003abe:	d1d6      	bne.n	8003a6e <_svfiprintf_r+0x176>
 8003ac0:	89ab      	ldrh	r3, [r5, #12]
 8003ac2:	065b      	lsls	r3, r3, #25
 8003ac4:	f53f af2c 	bmi.w	8003920 <_svfiprintf_r+0x28>
 8003ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aca:	b01d      	add	sp, #116	; 0x74
 8003acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad0:	ab03      	add	r3, sp, #12
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	462a      	mov	r2, r5
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <_svfiprintf_r+0x1f8>)
 8003ada:	a904      	add	r1, sp, #16
 8003adc:	f000 f87c 	bl	8003bd8 <_printf_i>
 8003ae0:	e7eb      	b.n	8003aba <_svfiprintf_r+0x1c2>
 8003ae2:	bf00      	nop
 8003ae4:	080040be 	.word	0x080040be
 8003ae8:	080040c8 	.word	0x080040c8
 8003aec:	00000000 	.word	0x00000000
 8003af0:	08003841 	.word	0x08003841
 8003af4:	080040c4 	.word	0x080040c4

08003af8 <_printf_common>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	4616      	mov	r6, r2
 8003afe:	4699      	mov	r9, r3
 8003b00:	688a      	ldr	r2, [r1, #8]
 8003b02:	690b      	ldr	r3, [r1, #16]
 8003b04:	4607      	mov	r7, r0
 8003b06:	4293      	cmp	r3, r2
 8003b08:	bfb8      	it	lt
 8003b0a:	4613      	movlt	r3, r2
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b12:	460c      	mov	r4, r1
 8003b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b18:	b10a      	cbz	r2, 8003b1e <_printf_common+0x26>
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	0699      	lsls	r1, r3, #26
 8003b22:	bf42      	ittt	mi
 8003b24:	6833      	ldrmi	r3, [r6, #0]
 8003b26:	3302      	addmi	r3, #2
 8003b28:	6033      	strmi	r3, [r6, #0]
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	f015 0506 	ands.w	r5, r5, #6
 8003b30:	d106      	bne.n	8003b40 <_printf_common+0x48>
 8003b32:	f104 0a19 	add.w	sl, r4, #25
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dc28      	bgt.n	8003b92 <_printf_common+0x9a>
 8003b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b44:	1e13      	subs	r3, r2, #0
 8003b46:	6822      	ldr	r2, [r4, #0]
 8003b48:	bf18      	it	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	0692      	lsls	r2, r2, #26
 8003b4e:	d42d      	bmi.n	8003bac <_printf_common+0xb4>
 8003b50:	4649      	mov	r1, r9
 8003b52:	4638      	mov	r0, r7
 8003b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b58:	47c0      	blx	r8
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d020      	beq.n	8003ba0 <_printf_common+0xa8>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	68e5      	ldr	r5, [r4, #12]
 8003b62:	f003 0306 	and.w	r3, r3, #6
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf18      	it	ne
 8003b6a:	2500      	movne	r5, #0
 8003b6c:	6832      	ldr	r2, [r6, #0]
 8003b6e:	f04f 0600 	mov.w	r6, #0
 8003b72:	68a3      	ldr	r3, [r4, #8]
 8003b74:	bf08      	it	eq
 8003b76:	1aad      	subeq	r5, r5, r2
 8003b78:	6922      	ldr	r2, [r4, #16]
 8003b7a:	bf08      	it	eq
 8003b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bfc4      	itt	gt
 8003b84:	1a9b      	subgt	r3, r3, r2
 8003b86:	18ed      	addgt	r5, r5, r3
 8003b88:	341a      	adds	r4, #26
 8003b8a:	42b5      	cmp	r5, r6
 8003b8c:	d11a      	bne.n	8003bc4 <_printf_common+0xcc>
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e008      	b.n	8003ba4 <_printf_common+0xac>
 8003b92:	2301      	movs	r3, #1
 8003b94:	4652      	mov	r2, sl
 8003b96:	4649      	mov	r1, r9
 8003b98:	4638      	mov	r0, r7
 8003b9a:	47c0      	blx	r8
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d103      	bne.n	8003ba8 <_printf_common+0xb0>
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba8:	3501      	adds	r5, #1
 8003baa:	e7c4      	b.n	8003b36 <_printf_common+0x3e>
 8003bac:	2030      	movs	r0, #48	; 0x30
 8003bae:	18e1      	adds	r1, r4, r3
 8003bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bba:	4422      	add	r2, r4
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bc2:	e7c5      	b.n	8003b50 <_printf_common+0x58>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	4649      	mov	r1, r9
 8003bca:	4638      	mov	r0, r7
 8003bcc:	47c0      	blx	r8
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d0e6      	beq.n	8003ba0 <_printf_common+0xa8>
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7d9      	b.n	8003b8a <_printf_common+0x92>
	...

08003bd8 <_printf_i>:
 8003bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bdc:	460c      	mov	r4, r1
 8003bde:	7e27      	ldrb	r7, [r4, #24]
 8003be0:	4691      	mov	r9, r2
 8003be2:	2f78      	cmp	r7, #120	; 0x78
 8003be4:	4680      	mov	r8, r0
 8003be6:	469a      	mov	sl, r3
 8003be8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bee:	d807      	bhi.n	8003c00 <_printf_i+0x28>
 8003bf0:	2f62      	cmp	r7, #98	; 0x62
 8003bf2:	d80a      	bhi.n	8003c0a <_printf_i+0x32>
 8003bf4:	2f00      	cmp	r7, #0
 8003bf6:	f000 80d9 	beq.w	8003dac <_printf_i+0x1d4>
 8003bfa:	2f58      	cmp	r7, #88	; 0x58
 8003bfc:	f000 80a4 	beq.w	8003d48 <_printf_i+0x170>
 8003c00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c08:	e03a      	b.n	8003c80 <_printf_i+0xa8>
 8003c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c0e:	2b15      	cmp	r3, #21
 8003c10:	d8f6      	bhi.n	8003c00 <_printf_i+0x28>
 8003c12:	a001      	add	r0, pc, #4	; (adr r0, 8003c18 <_printf_i+0x40>)
 8003c14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c18:	08003c71 	.word	0x08003c71
 8003c1c:	08003c85 	.word	0x08003c85
 8003c20:	08003c01 	.word	0x08003c01
 8003c24:	08003c01 	.word	0x08003c01
 8003c28:	08003c01 	.word	0x08003c01
 8003c2c:	08003c01 	.word	0x08003c01
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003c01 	.word	0x08003c01
 8003c38:	08003c01 	.word	0x08003c01
 8003c3c:	08003c01 	.word	0x08003c01
 8003c40:	08003c01 	.word	0x08003c01
 8003c44:	08003d93 	.word	0x08003d93
 8003c48:	08003cb5 	.word	0x08003cb5
 8003c4c:	08003d75 	.word	0x08003d75
 8003c50:	08003c01 	.word	0x08003c01
 8003c54:	08003c01 	.word	0x08003c01
 8003c58:	08003db5 	.word	0x08003db5
 8003c5c:	08003c01 	.word	0x08003c01
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003c01 	.word	0x08003c01
 8003c68:	08003c01 	.word	0x08003c01
 8003c6c:	08003d7d 	.word	0x08003d7d
 8003c70:	680b      	ldr	r3, [r1, #0]
 8003c72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c76:	1d1a      	adds	r2, r3, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	600a      	str	r2, [r1, #0]
 8003c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0a4      	b.n	8003dce <_printf_i+0x1f6>
 8003c84:	6825      	ldr	r5, [r4, #0]
 8003c86:	6808      	ldr	r0, [r1, #0]
 8003c88:	062e      	lsls	r6, r5, #24
 8003c8a:	f100 0304 	add.w	r3, r0, #4
 8003c8e:	d50a      	bpl.n	8003ca6 <_printf_i+0xce>
 8003c90:	6805      	ldr	r5, [r0, #0]
 8003c92:	600b      	str	r3, [r1, #0]
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	da03      	bge.n	8003ca0 <_printf_i+0xc8>
 8003c98:	232d      	movs	r3, #45	; 0x2d
 8003c9a:	426d      	negs	r5, r5
 8003c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ca0:	230a      	movs	r3, #10
 8003ca2:	485e      	ldr	r0, [pc, #376]	; (8003e1c <_printf_i+0x244>)
 8003ca4:	e019      	b.n	8003cda <_printf_i+0x102>
 8003ca6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003caa:	6805      	ldr	r5, [r0, #0]
 8003cac:	600b      	str	r3, [r1, #0]
 8003cae:	bf18      	it	ne
 8003cb0:	b22d      	sxthne	r5, r5
 8003cb2:	e7ef      	b.n	8003c94 <_printf_i+0xbc>
 8003cb4:	680b      	ldr	r3, [r1, #0]
 8003cb6:	6825      	ldr	r5, [r4, #0]
 8003cb8:	1d18      	adds	r0, r3, #4
 8003cba:	6008      	str	r0, [r1, #0]
 8003cbc:	0628      	lsls	r0, r5, #24
 8003cbe:	d501      	bpl.n	8003cc4 <_printf_i+0xec>
 8003cc0:	681d      	ldr	r5, [r3, #0]
 8003cc2:	e002      	b.n	8003cca <_printf_i+0xf2>
 8003cc4:	0669      	lsls	r1, r5, #25
 8003cc6:	d5fb      	bpl.n	8003cc0 <_printf_i+0xe8>
 8003cc8:	881d      	ldrh	r5, [r3, #0]
 8003cca:	2f6f      	cmp	r7, #111	; 0x6f
 8003ccc:	bf0c      	ite	eq
 8003cce:	2308      	moveq	r3, #8
 8003cd0:	230a      	movne	r3, #10
 8003cd2:	4852      	ldr	r0, [pc, #328]	; (8003e1c <_printf_i+0x244>)
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cda:	6866      	ldr	r6, [r4, #4]
 8003cdc:	2e00      	cmp	r6, #0
 8003cde:	bfa8      	it	ge
 8003ce0:	6821      	ldrge	r1, [r4, #0]
 8003ce2:	60a6      	str	r6, [r4, #8]
 8003ce4:	bfa4      	itt	ge
 8003ce6:	f021 0104 	bicge.w	r1, r1, #4
 8003cea:	6021      	strge	r1, [r4, #0]
 8003cec:	b90d      	cbnz	r5, 8003cf2 <_printf_i+0x11a>
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	d04d      	beq.n	8003d8e <_printf_i+0x1b6>
 8003cf2:	4616      	mov	r6, r2
 8003cf4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cf8:	fb03 5711 	mls	r7, r3, r1, r5
 8003cfc:	5dc7      	ldrb	r7, [r0, r7]
 8003cfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d02:	462f      	mov	r7, r5
 8003d04:	42bb      	cmp	r3, r7
 8003d06:	460d      	mov	r5, r1
 8003d08:	d9f4      	bls.n	8003cf4 <_printf_i+0x11c>
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d10b      	bne.n	8003d26 <_printf_i+0x14e>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	07df      	lsls	r7, r3, #31
 8003d12:	d508      	bpl.n	8003d26 <_printf_i+0x14e>
 8003d14:	6923      	ldr	r3, [r4, #16]
 8003d16:	6861      	ldr	r1, [r4, #4]
 8003d18:	4299      	cmp	r1, r3
 8003d1a:	bfde      	ittt	le
 8003d1c:	2330      	movle	r3, #48	; 0x30
 8003d1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d26:	1b92      	subs	r2, r2, r6
 8003d28:	6122      	str	r2, [r4, #16]
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	4640      	mov	r0, r8
 8003d30:	f8cd a000 	str.w	sl, [sp]
 8003d34:	aa03      	add	r2, sp, #12
 8003d36:	f7ff fedf 	bl	8003af8 <_printf_common>
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d14c      	bne.n	8003dd8 <_printf_i+0x200>
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d42:	b004      	add	sp, #16
 8003d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d48:	4834      	ldr	r0, [pc, #208]	; (8003e1c <_printf_i+0x244>)
 8003d4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d4e:	680e      	ldr	r6, [r1, #0]
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d56:	061f      	lsls	r7, r3, #24
 8003d58:	600e      	str	r6, [r1, #0]
 8003d5a:	d514      	bpl.n	8003d86 <_printf_i+0x1ae>
 8003d5c:	07d9      	lsls	r1, r3, #31
 8003d5e:	bf44      	itt	mi
 8003d60:	f043 0320 	orrmi.w	r3, r3, #32
 8003d64:	6023      	strmi	r3, [r4, #0]
 8003d66:	b91d      	cbnz	r5, 8003d70 <_printf_i+0x198>
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	f023 0320 	bic.w	r3, r3, #32
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	2310      	movs	r3, #16
 8003d72:	e7af      	b.n	8003cd4 <_printf_i+0xfc>
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	f043 0320 	orr.w	r3, r3, #32
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	2378      	movs	r3, #120	; 0x78
 8003d7e:	4828      	ldr	r0, [pc, #160]	; (8003e20 <_printf_i+0x248>)
 8003d80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d84:	e7e3      	b.n	8003d4e <_printf_i+0x176>
 8003d86:	065e      	lsls	r6, r3, #25
 8003d88:	bf48      	it	mi
 8003d8a:	b2ad      	uxthmi	r5, r5
 8003d8c:	e7e6      	b.n	8003d5c <_printf_i+0x184>
 8003d8e:	4616      	mov	r6, r2
 8003d90:	e7bb      	b.n	8003d0a <_printf_i+0x132>
 8003d92:	680b      	ldr	r3, [r1, #0]
 8003d94:	6826      	ldr	r6, [r4, #0]
 8003d96:	1d1d      	adds	r5, r3, #4
 8003d98:	6960      	ldr	r0, [r4, #20]
 8003d9a:	600d      	str	r5, [r1, #0]
 8003d9c:	0635      	lsls	r5, r6, #24
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	d501      	bpl.n	8003da6 <_printf_i+0x1ce>
 8003da2:	6018      	str	r0, [r3, #0]
 8003da4:	e002      	b.n	8003dac <_printf_i+0x1d4>
 8003da6:	0671      	lsls	r1, r6, #25
 8003da8:	d5fb      	bpl.n	8003da2 <_printf_i+0x1ca>
 8003daa:	8018      	strh	r0, [r3, #0]
 8003dac:	2300      	movs	r3, #0
 8003dae:	4616      	mov	r6, r2
 8003db0:	6123      	str	r3, [r4, #16]
 8003db2:	e7ba      	b.n	8003d2a <_printf_i+0x152>
 8003db4:	680b      	ldr	r3, [r1, #0]
 8003db6:	1d1a      	adds	r2, r3, #4
 8003db8:	600a      	str	r2, [r1, #0]
 8003dba:	681e      	ldr	r6, [r3, #0]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	6862      	ldr	r2, [r4, #4]
 8003dc2:	f000 f82f 	bl	8003e24 <memchr>
 8003dc6:	b108      	cbz	r0, 8003dcc <_printf_i+0x1f4>
 8003dc8:	1b80      	subs	r0, r0, r6
 8003dca:	6060      	str	r0, [r4, #4]
 8003dcc:	6863      	ldr	r3, [r4, #4]
 8003dce:	6123      	str	r3, [r4, #16]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd6:	e7a8      	b.n	8003d2a <_printf_i+0x152>
 8003dd8:	4632      	mov	r2, r6
 8003dda:	4649      	mov	r1, r9
 8003ddc:	4640      	mov	r0, r8
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	47d0      	blx	sl
 8003de2:	3001      	adds	r0, #1
 8003de4:	d0ab      	beq.n	8003d3e <_printf_i+0x166>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	079b      	lsls	r3, r3, #30
 8003dea:	d413      	bmi.n	8003e14 <_printf_i+0x23c>
 8003dec:	68e0      	ldr	r0, [r4, #12]
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	4298      	cmp	r0, r3
 8003df2:	bfb8      	it	lt
 8003df4:	4618      	movlt	r0, r3
 8003df6:	e7a4      	b.n	8003d42 <_printf_i+0x16a>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4632      	mov	r2, r6
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	4640      	mov	r0, r8
 8003e00:	47d0      	blx	sl
 8003e02:	3001      	adds	r0, #1
 8003e04:	d09b      	beq.n	8003d3e <_printf_i+0x166>
 8003e06:	3501      	adds	r5, #1
 8003e08:	68e3      	ldr	r3, [r4, #12]
 8003e0a:	9903      	ldr	r1, [sp, #12]
 8003e0c:	1a5b      	subs	r3, r3, r1
 8003e0e:	42ab      	cmp	r3, r5
 8003e10:	dcf2      	bgt.n	8003df8 <_printf_i+0x220>
 8003e12:	e7eb      	b.n	8003dec <_printf_i+0x214>
 8003e14:	2500      	movs	r5, #0
 8003e16:	f104 0619 	add.w	r6, r4, #25
 8003e1a:	e7f5      	b.n	8003e08 <_printf_i+0x230>
 8003e1c:	080040cf 	.word	0x080040cf
 8003e20:	080040e0 	.word	0x080040e0

08003e24 <memchr>:
 8003e24:	4603      	mov	r3, r0
 8003e26:	b510      	push	{r4, lr}
 8003e28:	b2c9      	uxtb	r1, r1
 8003e2a:	4402      	add	r2, r0
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	d101      	bne.n	8003e36 <memchr+0x12>
 8003e32:	2000      	movs	r0, #0
 8003e34:	e003      	b.n	8003e3e <memchr+0x1a>
 8003e36:	7804      	ldrb	r4, [r0, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	428c      	cmp	r4, r1
 8003e3c:	d1f6      	bne.n	8003e2c <memchr+0x8>
 8003e3e:	bd10      	pop	{r4, pc}

08003e40 <memcpy>:
 8003e40:	440a      	add	r2, r1
 8003e42:	4291      	cmp	r1, r2
 8003e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e48:	d100      	bne.n	8003e4c <memcpy+0xc>
 8003e4a:	4770      	bx	lr
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e52:	4291      	cmp	r1, r2
 8003e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e58:	d1f9      	bne.n	8003e4e <memcpy+0xe>
 8003e5a:	bd10      	pop	{r4, pc}

08003e5c <memmove>:
 8003e5c:	4288      	cmp	r0, r1
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	eb01 0402 	add.w	r4, r1, r2
 8003e64:	d902      	bls.n	8003e6c <memmove+0x10>
 8003e66:	4284      	cmp	r4, r0
 8003e68:	4623      	mov	r3, r4
 8003e6a:	d807      	bhi.n	8003e7c <memmove+0x20>
 8003e6c:	1e43      	subs	r3, r0, #1
 8003e6e:	42a1      	cmp	r1, r4
 8003e70:	d008      	beq.n	8003e84 <memmove+0x28>
 8003e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e7a:	e7f8      	b.n	8003e6e <memmove+0x12>
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	4402      	add	r2, r0
 8003e80:	428a      	cmp	r2, r1
 8003e82:	d100      	bne.n	8003e86 <memmove+0x2a>
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e8e:	e7f7      	b.n	8003e80 <memmove+0x24>

08003e90 <_free_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	4605      	mov	r5, r0
 8003e94:	2900      	cmp	r1, #0
 8003e96:	d043      	beq.n	8003f20 <_free_r+0x90>
 8003e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e9c:	1f0c      	subs	r4, r1, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bfb8      	it	lt
 8003ea2:	18e4      	addlt	r4, r4, r3
 8003ea4:	f000 f8d0 	bl	8004048 <__malloc_lock>
 8003ea8:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <_free_r+0x94>)
 8003eaa:	6813      	ldr	r3, [r2, #0]
 8003eac:	4610      	mov	r0, r2
 8003eae:	b933      	cbnz	r3, 8003ebe <_free_r+0x2e>
 8003eb0:	6063      	str	r3, [r4, #4]
 8003eb2:	6014      	str	r4, [r2, #0]
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eba:	f000 b8cb 	b.w	8004054 <__malloc_unlock>
 8003ebe:	42a3      	cmp	r3, r4
 8003ec0:	d90a      	bls.n	8003ed8 <_free_r+0x48>
 8003ec2:	6821      	ldr	r1, [r4, #0]
 8003ec4:	1862      	adds	r2, r4, r1
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	bf01      	itttt	eq
 8003eca:	681a      	ldreq	r2, [r3, #0]
 8003ecc:	685b      	ldreq	r3, [r3, #4]
 8003ece:	1852      	addeq	r2, r2, r1
 8003ed0:	6022      	streq	r2, [r4, #0]
 8003ed2:	6063      	str	r3, [r4, #4]
 8003ed4:	6004      	str	r4, [r0, #0]
 8003ed6:	e7ed      	b.n	8003eb4 <_free_r+0x24>
 8003ed8:	461a      	mov	r2, r3
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	b10b      	cbz	r3, 8003ee2 <_free_r+0x52>
 8003ede:	42a3      	cmp	r3, r4
 8003ee0:	d9fa      	bls.n	8003ed8 <_free_r+0x48>
 8003ee2:	6811      	ldr	r1, [r2, #0]
 8003ee4:	1850      	adds	r0, r2, r1
 8003ee6:	42a0      	cmp	r0, r4
 8003ee8:	d10b      	bne.n	8003f02 <_free_r+0x72>
 8003eea:	6820      	ldr	r0, [r4, #0]
 8003eec:	4401      	add	r1, r0
 8003eee:	1850      	adds	r0, r2, r1
 8003ef0:	4283      	cmp	r3, r0
 8003ef2:	6011      	str	r1, [r2, #0]
 8003ef4:	d1de      	bne.n	8003eb4 <_free_r+0x24>
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4401      	add	r1, r0
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	6053      	str	r3, [r2, #4]
 8003f00:	e7d8      	b.n	8003eb4 <_free_r+0x24>
 8003f02:	d902      	bls.n	8003f0a <_free_r+0x7a>
 8003f04:	230c      	movs	r3, #12
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	e7d4      	b.n	8003eb4 <_free_r+0x24>
 8003f0a:	6820      	ldr	r0, [r4, #0]
 8003f0c:	1821      	adds	r1, r4, r0
 8003f0e:	428b      	cmp	r3, r1
 8003f10:	bf01      	itttt	eq
 8003f12:	6819      	ldreq	r1, [r3, #0]
 8003f14:	685b      	ldreq	r3, [r3, #4]
 8003f16:	1809      	addeq	r1, r1, r0
 8003f18:	6021      	streq	r1, [r4, #0]
 8003f1a:	6063      	str	r3, [r4, #4]
 8003f1c:	6054      	str	r4, [r2, #4]
 8003f1e:	e7c9      	b.n	8003eb4 <_free_r+0x24>
 8003f20:	bd38      	pop	{r3, r4, r5, pc}
 8003f22:	bf00      	nop
 8003f24:	200000b0 	.word	0x200000b0

08003f28 <_malloc_r>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	1ccd      	adds	r5, r1, #3
 8003f2c:	f025 0503 	bic.w	r5, r5, #3
 8003f30:	3508      	adds	r5, #8
 8003f32:	2d0c      	cmp	r5, #12
 8003f34:	bf38      	it	cc
 8003f36:	250c      	movcc	r5, #12
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	db01      	blt.n	8003f42 <_malloc_r+0x1a>
 8003f3e:	42a9      	cmp	r1, r5
 8003f40:	d903      	bls.n	8003f4a <_malloc_r+0x22>
 8003f42:	230c      	movs	r3, #12
 8003f44:	6033      	str	r3, [r6, #0]
 8003f46:	2000      	movs	r0, #0
 8003f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4a:	f000 f87d 	bl	8004048 <__malloc_lock>
 8003f4e:	4921      	ldr	r1, [pc, #132]	; (8003fd4 <_malloc_r+0xac>)
 8003f50:	680a      	ldr	r2, [r1, #0]
 8003f52:	4614      	mov	r4, r2
 8003f54:	b99c      	cbnz	r4, 8003f7e <_malloc_r+0x56>
 8003f56:	4f20      	ldr	r7, [pc, #128]	; (8003fd8 <_malloc_r+0xb0>)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b923      	cbnz	r3, 8003f66 <_malloc_r+0x3e>
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f000 f862 	bl	8004028 <_sbrk_r>
 8003f64:	6038      	str	r0, [r7, #0]
 8003f66:	4629      	mov	r1, r5
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f000 f85d 	bl	8004028 <_sbrk_r>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d123      	bne.n	8003fba <_malloc_r+0x92>
 8003f72:	230c      	movs	r3, #12
 8003f74:	4630      	mov	r0, r6
 8003f76:	6033      	str	r3, [r6, #0]
 8003f78:	f000 f86c 	bl	8004054 <__malloc_unlock>
 8003f7c:	e7e3      	b.n	8003f46 <_malloc_r+0x1e>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	1b5b      	subs	r3, r3, r5
 8003f82:	d417      	bmi.n	8003fb4 <_malloc_r+0x8c>
 8003f84:	2b0b      	cmp	r3, #11
 8003f86:	d903      	bls.n	8003f90 <_malloc_r+0x68>
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	441c      	add	r4, r3
 8003f8c:	6025      	str	r5, [r4, #0]
 8003f8e:	e004      	b.n	8003f9a <_malloc_r+0x72>
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	42a2      	cmp	r2, r4
 8003f94:	bf0c      	ite	eq
 8003f96:	600b      	streq	r3, [r1, #0]
 8003f98:	6053      	strne	r3, [r2, #4]
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f000 f85a 	bl	8004054 <__malloc_unlock>
 8003fa0:	f104 000b 	add.w	r0, r4, #11
 8003fa4:	1d23      	adds	r3, r4, #4
 8003fa6:	f020 0007 	bic.w	r0, r0, #7
 8003faa:	1ac2      	subs	r2, r0, r3
 8003fac:	d0cc      	beq.n	8003f48 <_malloc_r+0x20>
 8003fae:	1a1b      	subs	r3, r3, r0
 8003fb0:	50a3      	str	r3, [r4, r2]
 8003fb2:	e7c9      	b.n	8003f48 <_malloc_r+0x20>
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	6864      	ldr	r4, [r4, #4]
 8003fb8:	e7cc      	b.n	8003f54 <_malloc_r+0x2c>
 8003fba:	1cc4      	adds	r4, r0, #3
 8003fbc:	f024 0403 	bic.w	r4, r4, #3
 8003fc0:	42a0      	cmp	r0, r4
 8003fc2:	d0e3      	beq.n	8003f8c <_malloc_r+0x64>
 8003fc4:	1a21      	subs	r1, r4, r0
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f000 f82e 	bl	8004028 <_sbrk_r>
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d1dd      	bne.n	8003f8c <_malloc_r+0x64>
 8003fd0:	e7cf      	b.n	8003f72 <_malloc_r+0x4a>
 8003fd2:	bf00      	nop
 8003fd4:	200000b0 	.word	0x200000b0
 8003fd8:	200000b4 	.word	0x200000b4

08003fdc <_realloc_r>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	4607      	mov	r7, r0
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	460e      	mov	r6, r1
 8003fe4:	b921      	cbnz	r1, 8003ff0 <_realloc_r+0x14>
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fec:	f7ff bf9c 	b.w	8003f28 <_malloc_r>
 8003ff0:	b922      	cbnz	r2, 8003ffc <_realloc_r+0x20>
 8003ff2:	f7ff ff4d 	bl	8003e90 <_free_r>
 8003ff6:	4625      	mov	r5, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ffc:	f000 f830 	bl	8004060 <_malloc_usable_size_r>
 8004000:	42a0      	cmp	r0, r4
 8004002:	d20f      	bcs.n	8004024 <_realloc_r+0x48>
 8004004:	4621      	mov	r1, r4
 8004006:	4638      	mov	r0, r7
 8004008:	f7ff ff8e 	bl	8003f28 <_malloc_r>
 800400c:	4605      	mov	r5, r0
 800400e:	2800      	cmp	r0, #0
 8004010:	d0f2      	beq.n	8003ff8 <_realloc_r+0x1c>
 8004012:	4631      	mov	r1, r6
 8004014:	4622      	mov	r2, r4
 8004016:	f7ff ff13 	bl	8003e40 <memcpy>
 800401a:	4631      	mov	r1, r6
 800401c:	4638      	mov	r0, r7
 800401e:	f7ff ff37 	bl	8003e90 <_free_r>
 8004022:	e7e9      	b.n	8003ff8 <_realloc_r+0x1c>
 8004024:	4635      	mov	r5, r6
 8004026:	e7e7      	b.n	8003ff8 <_realloc_r+0x1c>

08004028 <_sbrk_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	2300      	movs	r3, #0
 800402c:	4d05      	ldr	r5, [pc, #20]	; (8004044 <_sbrk_r+0x1c>)
 800402e:	4604      	mov	r4, r0
 8004030:	4608      	mov	r0, r1
 8004032:	602b      	str	r3, [r5, #0]
 8004034:	f7fc fe36 	bl	8000ca4 <_sbrk>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_sbrk_r+0x1a>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_sbrk_r+0x1a>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	20000248 	.word	0x20000248

08004048 <__malloc_lock>:
 8004048:	4801      	ldr	r0, [pc, #4]	; (8004050 <__malloc_lock+0x8>)
 800404a:	f000 b811 	b.w	8004070 <__retarget_lock_acquire_recursive>
 800404e:	bf00      	nop
 8004050:	20000250 	.word	0x20000250

08004054 <__malloc_unlock>:
 8004054:	4801      	ldr	r0, [pc, #4]	; (800405c <__malloc_unlock+0x8>)
 8004056:	f000 b80c 	b.w	8004072 <__retarget_lock_release_recursive>
 800405a:	bf00      	nop
 800405c:	20000250 	.word	0x20000250

08004060 <_malloc_usable_size_r>:
 8004060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004064:	1f18      	subs	r0, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	bfbc      	itt	lt
 800406a:	580b      	ldrlt	r3, [r1, r0]
 800406c:	18c0      	addlt	r0, r0, r3
 800406e:	4770      	bx	lr

08004070 <__retarget_lock_acquire_recursive>:
 8004070:	4770      	bx	lr

08004072 <__retarget_lock_release_recursive>:
 8004072:	4770      	bx	lr

08004074 <_init>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	bf00      	nop
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr

08004080 <_fini>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	bf00      	nop
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr
